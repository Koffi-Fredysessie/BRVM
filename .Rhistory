# Prendre le mean si les taux obligataires de deux emprunts coincides
# if(1 < nrow(base3_sub)){
#     base3_sub = base3_sub%>%
#         group_by(Date, emetteur) %>%
#         summarise(Coupon = mean(Coupon),  #agrégation Coupon
#                   Prix= mean(Prix),       #agrégation Prix
#                   Rendement_obligataire = mean(Rendement_obligataire)
#         )
# }
# Prendre le mean du rendement obligataire si plusieurs obligations coincident
base1_ticker_sub$Rendement_obligataire <- mean(base3_sub$Rendement_obligataire)
# base1_ticker_sub$Rendement_obligataire <- base3_sub$Rendement_obligataire
# base1_ticker_sub$Rendement_obligataire <- base3_sub$Rendement_obligataire[base2_emetteur$Date == date_min]
# base3_sub <- rbind(base3_sub, base2_emetteur[base2_emetteur$Date == date_min,])
base4 <- rbind(base4, base1_ticker_sub)
} # else {
#     print("Aucune date dans la base 2 n'est supérieure ou égale à date_min.")
# }
# Supprimer la date min de la base 2
base2_emetteur <- base2_emetteur[base2_emetteur$Date > date_min,]
}
}
dim(base4)
dim(the_data)
dim(the_data) - dim(base4)
View(base4)
BRVM_get1("Brvm10", "2013-01-01", "2022-12-31")
les.indices = BRVM_get1(c("Brvm10", "brvmc"),Period = 0, "2013-01-01", "2022-12-31")
View(les.indices)
library(readxl)
brvm_DTstock <- read_excel("GitHub/Liquidity Brvm/BRVM Datastock good base.xlsx")
View(brvm_DTstock)
str(brvm_DTstock)
head(brvm_DTstock$Date)
brvm_DTstock$Date = as.date(brvm_DTstock$Date)
brvm_DTstock$Date = as.Date(brvm_DTstock$Date)
brvm_DTstock <- rbind(brvm_DTstock, les.indices)
5 is(between(4,8))
is 5 (between(4,8))
brvm_DTstock_fin <- subset(brvm_DTstock, Date >= "2013-01-01" & Date <= "2022-12-31")
View(brvm_DTstock_fin)
library(readxl)
Action_filter <- read_excel("DOSSIER MFR BRVM/AMF_UMOA/Action filtrés.xlsx",
sheet = "Action_Filtré_Mediane")
View(Action_filter)
append(Action_filter$Ticker, c("BRVMC", "BRVM10"))
library(readxl)
Action_filt80 <- read_excel("DOSSIER MFR BRVM/AMF_UMOA/Action filtrés.xlsx",
sheet = "Taux_Filtre_80")
View(Action_filt80)
append(Action_filt80$Ticker, c("BRVMC", "BRVM10"))
ticker_17 = append(Action_filt80$Ticker, c("BRVMC", "BRVM10"))
nrow(brvm_DTstock_fin)
nrow(subset(brvm_DTstock_fin, ticker %in% ticker_22))
# Selon la médiane, 22 titres seront utilisés pour la modélisation
# Nous y ajoutons BRVM10 et BRVMC
ticker_22 = append(Action_filter$Ticker, c("BRVMC", "BRVM10"))
ticker_17 = append(Action_filt80$Ticker, c("BRVMC", "BRVM10"))
nrow(subset(brvm_DTstock_fin, ticker %in% ticker_22))
ticker_22
nrow(subset(brvm_DTstock_fin, Ticker %in% ticker_22))
nrow(subset(brvm_DTstock_fin, Ticker %in% ticker_17))
brvm_DTstock_22 = subset(brvm_DTstock_fin, Ticker %in% ticker_22)
brvm_DTstock_17 = subset(brvm_DTstock_fin, Ticker %in% ticker_17)
nrow(brvm_DTstock_17)
nrow(brvm_DTstock_22)
nrow(base4)
save.image()
nrow(subset(base4, Ticker %in% Action_filter$Ticker))
nrow(subset(base4, Ticker %in% Action_filt80$Ticker))
ncol(subset(base4, Ticker %in% Action_filt80$Ticker))
### Concerver la base de données à utiliser pour la modélisation
base4_22 = subset(base4, Ticker %in% Action_filt80$Ticker) # 42654 données dispo
base4_17 = subset(base4, Ticker %in% Action_filter$Ticker) # 33008 données dispo
length(unique(brvm_DTstock$Ticker))
(unique(brvm_DTstock$Ticker))
(unique(base4$Ticker))
head(month(base4_22$Date))
head(months.POSIXt(base4_22$Date))
head(year(base4_22$Date))
(unique(base4_22$Ticker))
(unique(base4_17$Ticker))
### Concerver la base de données à utiliser pour la modélisation
base4_17 = subset(base4, Ticker %in% Action_filt80$Ticker) # 42654 données dispo
base4_22 = subset(base4, Ticker %in% Action_filter$Ticker) # 33008 données dispo
nrow(base4_17)
(unique(base4_17$Ticker))
(unique(base4_22$Ticker))
base4_year = base4_22
names(base4_22)
names(base4_22)[1]
names(base4_22)[1] = "Year"
names(base4_22)[1]
names(base4_22)
names(base4_22)[1] = "Date"
names(base4_year)[1]
names(base4_year)[1] = "Year"
unique(year(base4_year$Year))
year(as.Date("2013-01-01"))
View(base4_year)
# Changer la date en année
base4_year$Year = year(base4_year$Year)
head(base4_year %>%
group_by(Year, Ticker) %>%
summarise_all(mean))
# Grouper par ticker et années
base4_year <- base4_year %>%
group_by(Year, Ticker) %>%
summarise_all(mean)
rm(base4_year)
base4_year_22 = base4_22
names(base4_year_22)[1] = "Year"
# Changer la date en année
base4_year_22$Year = year(base4_year_22$Year)
# Grouper par ticker et années
base4_year_22 <- base4_year_22 %>%
group_by(Year, Ticker) %>%
summarise_all(mean)
View(base4_year_22)
################################################################################
################################################################################
################ AGREGATION EN DONNEES ANNUELLES ET MENSUELLES #################
################################################################################
################################################################################
# Agrégation mensuelle
base4_month_22 = base4_22
head(base4_month_22 %>%
mutate(Date = floor_date(as.Date(Date), "month")) %>%
rename(Date_Mois_Annee = Date))
format(base4_month_22$Date, "%Y-%m")
unique(format(base4_month_22$Date, "%Y-%m"))
names(base4_month_22)[1] = "Month"
base4_month_22$Month = format(base4_month_22$Month, "%Y-%m")
View(base4_month_22)
head(base4_month_22 %>%
group_by(Month, Ticker) %>%
summarise_all(mean))
# Grouper par ticker et mois
base4_month_22 <- base4_month_22 %>%
group_by(Month, Ticker) %>%
summarise_all(mean)
View(base4_month_22)
View(base4)
base4 <- base4 %>%
rename(Contrat_Liq = Annonces)
### Concerver la base de données à utiliser pour la modélisation
base4_17 = subset(base4, Ticker %in% Action_filt80$Ticker) # 33008 données dispo
base4_22 = subset(base4, Ticker %in% Action_filter$Ticker) # 42654 données dispo
################################################################################
################################################################################
################ AGREGATION EN DONNEES ANNUELLES ET MENSUELLES #################
################################################################################
################################################################################
# Agrégation mensuelle
base4_month_22 = base4_22
names(base4_month_22)[1] = "Month"
base4_month_22$Month = format(base4_month_22$Month, "%Y-%m")
# Grouper par ticker et mois
base4_month_22 <- base4_month_22 %>%
group_by(Month, Ticker) %>%
summarise_all(mean)
################################
# Agrégation annuelle
base4_year_22 = base4_22
names(base4_year_22)[1] = "Year"
# Changer la date en année
base4_year_22$Year = year(base4_year_22$Year)
# Grouper par ticker et années
base4_year_22 <- base4_year_22 %>%
group_by(Year, Ticker) %>%
summarise_all(mean)
View(base4_year_22)
write_xlsx(list("Sheet 1" = brvm_DTstock, # 7 colonnes et 46 tickers + 2 indices
# Le sheet 1 est la base de données globale
"Sheet 2" = brvm_DTstock_22, # 7 colonnes et 22 tickers + 2 indices
"Sheet 3" = brvm_DTstock_17, # 7 colonnes et 17 tickers + 2 indices
"Sheet 4" = base4, #Daily Dt Tous les titres (45 tickers)
"Sheet 5" = base4_22, # Daily Dt Les 22 tickers (selon la mediane)
"Sheet 6" = base4_17, # Daily Dt Les 17 tickers + 2 indices (selon 80%)
"Sheet 7" = BRVM_Liq_measure, # Données à hautes fréquences, 17 colonnes
"Sheet 8" = base4_month_22, # Monthly-year data of 22 Ticker
"Sheet 9" = base4_year_22, # Yearly data of 22 Ticker
"Sheet 10"= Daily_liquidity,
"Sheet 11"= best_limit,
),
"BRVM et ses mesures de liquidité_Best DB.xlsx"
# , append = TRUE
)
write_xlsx(list("Sheet 1" = brvm_DTstock, # 7 colonnes et 46 tickers + 2 indices
# Le sheet 1 est la base de données globale
"Sheet 2" = brvm_DTstock_22, # 7 colonnes et 22 tickers + 2 indices
"Sheet 3" = brvm_DTstock_17, # 7 colonnes et 17 tickers + 2 indices
"Sheet 4" = base4, #Daily Dt Tous les titres (45 tickers)
"Sheet 5" = base4_22, # Daily Dt Les 22 tickers (selon la mediane)
"Sheet 6" = base4_17, # Daily Dt Les 17 tickers + 2 indices (selon 80%)
"Sheet 7" = BRVM_Liq_measure, # Données à hautes fréquences, 17 colonnes
"Sheet 8" = base4_month_22, # Monthly-year data of 22 Ticker
"Sheet 9" = base4_year_22, # Yearly data of 22 Ticker
"Sheet 10"= Daily_liquidity,
"Sheet 11"= best_limit,
),
"BRVM et ses mesures de liquidité_Best DB.xlsx"
# , append = TRUE
)
write_xlsx(list("Sheet 1" = brvm_DTstock, # 7 colonnes et 46 tickers + 2 indices
# Le sheet 1 est la base de données globale
"Sheet 2" = brvm_DTstock_22, # 7 colonnes et 22 tickers + 2 indices
"Sheet 3" = brvm_DTstock_17, # 7 colonnes et 17 tickers + 2 indices
"Sheet 4" = base4, #Daily Dt Tous les titres (45 tickers)
"Sheet 5" = base4_22, # Daily Dt Les 22 tickers (selon la mediane)
"Sheet 6" = base4_17, # Daily Dt Les 17 tickers + 2 indices (selon 80%)
"Sheet 7" = BRVM_Liq_measure, # Données à hautes fréquences, 17 colonnes
"Sheet 8" = base4_month_22, # Monthly-year data of 22 Ticker
"Sheet 9" = base4_year_22, # Yearly data of 22 Ticker
"Sheet 10"= Daily_liquidity,
"Sheet 11"= best_limit
),
"BRVM et ses mesures de liquidité_Best DB.xlsx"
# , append = TRUE
)
library(readxl)
Dividende <- read_excel("DOSSIER MFR BRVM/AMF_UMOA/ANNONCE DE DIVIDENDE.xlsx",
col_types = c("numeric", "text", "text"))
View(Dividende)
names(Dividende)[2] = 'Ticker'
Dividende[7,3]
Dividende[7,3] == "**"
Dividende[7,3][1]
Dividende[7,3][1]== "**"
Dividende[7,3][[1]]== "**"
Dividende[7,3][[1]]
for (i in 1:nrow(Dividende)) {
th_data = Dividende[i,3][[1]]
ifelse(Dividende[i,3][[1]] == "**",
Dividende[i,3][[1]] = NA,
for (i in 1:nrow(Dividende)) {
th_data = Dividende[i,3][[1]]
ifelse(Dividende[i,3][[1]] == "**",
Dividende[i,3][[1]] = NA,
Dividende$Montant <- ifelse(Dividende$Montant == "**", NA, Dividende$Montant)
Dividende <- read_excel("DOSSIER MFR BRVM/AMF_UMOA/ANNONCE DE DIVIDENDE.xlsx",
col_types = c("numeric", "text", "text"))
names(Dividende)[2] = 'Ticker'
Dividende$Montant <- ifelse(Dividende$Montant == "**", 0, Dividende$Montant)
Dividende$Montant <- ifelse(Dividende$Montant == "-", 0, Dividende$Montant)
dim(Dividende)
dim(na.omit(Dividende))
Dividende$Montant <- ifelse(is.na(Dividende$Montant), 0, Dividende$Montant)
dim(na.omit(Dividende))
base4_year_22$Year
is.numeric(base4_year_22$Year)
nrow(subset(Dividende, Ticker %in% base4_year_22))
nrow(subset(Dividende, Ticker %in% base4_year_22$Ticker))
unique(subset(Dividende, Ticker %in% base4_year_22$Ticker)$Ticker)
Div_22 = subset(Dividende, Ticker %in% base4_year_22$Ticker)
dput(names(Div_22))
names(Div_22) = c("Year", "Ticker", "Dividende")
head(base4_year_22%>%
inner_join(Div_22, by = c("Year", "Ticker")))
base4_year_22_dividende = base4_year_22%>%
inner_join(Div_22, by = c("Year", "Ticker"))
View(base4_year_22_dividende)
getwd()
write_xlsx(base4_year_22_dividende, 'BRVM Yearly data mesure de liquidité.xlsx')
str(base4_year_22_dividende)
class(base4_year_22_dividende$Dividende)
base4_year_22_dividende$Dividende = as.numeric(base4_year_22_dividende$Dividende)
base4_year_22_dividende$Dividende = as.numeric(round(base4_year_22_dividende$Dividende, digits = 3))
write_xlsx(base4_year_22_dividende, 'BRVM Yearly data mesure de liquidité.xlsx')
save.image()
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/Brvm_navbar_try_date.R')
runApp('C:/Users/koffi/Downloads/Brvm_navbar_try_date.R')
runApp('C:/Users/koffi/Downloads/Brvm_navbar_try_date.R')
BRVM_stock_market("2021-03-25")
runApp('C:/Users/koffi/Downloads/Brvm_navbar_try_date.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/Brvm_navbar_try_date.R')
runApp('C:/Users/koffi/Downloads/Brvm_navbar_try_date.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
BRVM_stock_market("2023-04-26")
BRVM_stock_market("2023-26-04")
BRVM_stock_market("2023-04-20")
class(BRVM_stock_market("2023-04-20"))
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
is.null(BRVM_stock_market("2023-04-26"))
type(BRVM_stock_market("2023-04-26"))
typeof(BRVM_stock_market("2023-04-26"))
is.character(BRVM_stock_market("2023-04-26"))
is.character(BRVM_stock_market("2020-04-26"))
is.character(BRVM_stock_market("2021-04-26"))
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
BRVM_ticker_desc()
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
View(BRVM_Liq_measure)
View(BRVM_Liq_measure(Volume[Close > Open]))
BRVM_Liq_measure(Volume[Close > Open])
BRVM_Liq_measure[Volume[Close > Open]]
BRVM_Liq_measure[Volume[Close > Open],]
Daily_liquidity[Volume[Close > Open],]
Daily_liquidity[Volume[Close > Open]]
Daily_liquidity[,Volume[Close > Open]]
View(Daily_liquidity)
getwd()
unique(Daily_liquidity_fin$Date)
for (tic in unique(Daily_liquidity_fin$Ticker)) {
print(paste0(tic, " - ",nrow(subset(Daily_liquidity, Ticker == tic))-nrow(subset(Daily_liquidity_fin, Ticker == tic))))
}
library(highfrequency)
# Nom du package
cat("\n", "#", "BRVM  Bourse Regionale", "#", "\n", sep = " ")
# Centrer le texte
cat(paste0(strrep(" ", round((getOption("width") - nchar("BRVM Bourse Regionale"))/2)), "progClassic"), "\n")
cat(rep("#", 60), "\n")  # Affiche 60 dièses
cat("#", rep(" ", 25), "progClassic.R", rep(" ", 25), "#", "\n")  # Affiche le nom du fichier centré entre des espaces
cat(rep("#", 60), "\n")
center_text <- function(text) {
cat("\n", rep("#", times = 70), "\n")
cat("#", rep(" ", times = round((70 - nchar(text))/2) - 1), text,
rep(" ", times = round((70 - nchar(text))/2)), "#\n")
cat(rep("#", times = 70), "\n\n")
}
center_text("BRVM  Bourse Regionale")
setwd("~/GitHub/The BRVM saved/BRVM")
devtools::submit_cran()
View(the_data)
View(base4)
head(Daily_liquidity[,Volume[Close < Open]])
which(Daily_liquidity[,Volume[Close < Open]])
17646599/22070400
17646599/5
(20-19)/19
getwd()
find . -name '*.R'
find '*.R'
find '.R'
fichiers <- list.files(pattern = "\\.R$")
fichiers
fichiers <- list.files(pattern = "\.R")
fichiers <- list.files(pattern = "\\.R")
fichiers
setwd("~/GitHub/The BRVM saved/BRVM/R")
fichiers <- list.files(pattern = "\\.R")
fichiers
for (fichier in fichiers) {
contenu <- readLines(fichier)
contenu_modifie <- gsub("dontrun", "donttest", contenu, fixed = TRUE)
file.edit(fichier)
writeLines(contenu_modifie, fichier)
}
fichiers <- list.files(pattern = "\\.R")
fichiers
"print\\("
print('It possible to plot each sector chart line')
message('It possible to plot each sector chart line')
warning('It possible to plot each sector chart line')
# Parcourir chaque fichier .R dans le répertoire et vérifier si l'expression "print" est présente
for (file in fichiers) {
code <- readLines(file)
if (any(grepl("print", code))) {
cat(paste("Le fichier", file, "contient l'expression 'print'\n"))
}
}
cat('It possible to plot each sector chart line')
cat("\033[32mVous devez changer la date\033[0m\n")
2+9+19+8+4+13+8
cat("\033[32mVous devez changer la date\033[0m\")
n
=
cat("The date to be entered must not be a public holiday")
message(paste0("There are ", 5, " ok"))
7+26
33+19
77+8
7+26+19+9+5+11+3+5
85/3
company_cap <- function(company){
company<-toupper(company)
tryCatch({
brvm_cap_all <- rvest::read_html("https://www.brvm.org/en/capitalisations/0/status/200") %>%
rvest::html_elements('table') %>%
rvest::html_table()
brvm_cap_all <- brvm_cap_all[[4]]
brvm_cap_all$`Global capitalization (%)`<-gsub(",", ".",brvm_cap_all$`Global capitalization (%)`)
for (elm in 1:nrow(brvm_cap_all)){
if (brvm_cap_all[elm,1]==company){
the_cap<-paste0(brvm_cap_all[elm,6], "")
}
}
return(the_cap)
},
error = function(e) {
message("Make sure you have an active internet connection")
},
warning = function(w) {
message("Make sure you have an active internet connection")
})
}
company_cap("BICC")
company_cap("BICC5")
company_cap <- function(company){
company_cap <- function(company){
company_cap <- function(company){
company<-toupper(company)
Symbole <- c("ABJC", "BICC", "BNBC", "BOAB", "BOABF", "BOAC",
"BOAM", "BOAN", "BOAS", "CABC", "CBIBF", "CFAC",
"CIEC", "ECOC", "ETIT", "FTSC", "NEIC", "NSBC",
"NTLC", "ONTBF", "ORGT", "ORAC","PALC", "PRSC",
"SAFC", "SCRC", "SDCC", "SDSC", "SEMC", "SGBC",
"SHEC", "SIBC", "SICC", "SIVC", "SLBC", "SMBC",
"SNTS", "SOGC", "SPHC", "STAC", "STBC", "SVOC",
"TTLC", "TTLS", "UNLC", "UNXC"
#, "TTRC"
)
if (company %in% Symbole){
tryCatch({
brvm_cap_all <- rvest::read_html("https://www.brvm.org/en/capitalisations/0/status/200") %>%
rvest::html_elements('table') %>%
rvest::html_table()
brvm_cap_all <- brvm_cap_all[[4]]
brvm_cap_all$`Global capitalization (%)`<-gsub(",", ".",brvm_cap_all$`Global capitalization (%)`)
for (elm in 1:nrow(brvm_cap_all)){
if (brvm_cap_all[elm,1]==company){
the_cap<-paste0(brvm_cap_all[elm,6], "")
}
}
return(the_cap)
},
error = function(e) {
message("Make sure you have an active internet connection")
},
warning = function(w) {
message("Make sure you have an active internet connection")
})
} else{
message(paste0("Make sure", company, " is BRVM Ticker")
}
company_cap <- function(company){
company<-toupper(company)
Symbole <- c("ABJC", "BICC", "BNBC", "BOAB", "BOABF", "BOAC",
"BOAM", "BOAN", "BOAS", "CABC", "CBIBF", "CFAC",
"CIEC", "ECOC", "ETIT", "FTSC", "NEIC", "NSBC",
"NTLC", "ONTBF", "ORGT", "ORAC","PALC", "PRSC",
"SAFC", "SCRC", "SDCC", "SDSC", "SEMC", "SGBC",
"SHEC", "SIBC", "SICC", "SIVC", "SLBC", "SMBC",
"SNTS", "SOGC", "SPHC", "STAC", "STBC", "SVOC",
"TTLC", "TTLS", "UNLC", "UNXC"
#, "TTRC"
)
if (company %in% Symbole){
tryCatch({
brvm_cap_all <- rvest::read_html("https://www.brvm.org/en/capitalisations/0/status/200") %>%
rvest::html_elements('table') %>%
rvest::html_table()
brvm_cap_all <- brvm_cap_all[[4]]
brvm_cap_all$`Global capitalization (%)`<-gsub(",", ".",brvm_cap_all$`Global capitalization (%)`)
for (elm in 1:nrow(brvm_cap_all)){
if (brvm_cap_all[elm,1]==company){
the_cap<-paste0(brvm_cap_all[elm,6], "")
}
}
return(the_cap)
},
error = function(e) {
message("Make sure you have an active internet connection")
},
warning = function(w) {
message("Make sure you have an active internet connection")
})
} else{
message(paste0("Make sure", company, " is BRVM Ticker"))
}
}
company_cap("BICC5")
fichiers
getwd()
print("message(")
# Vérifier chaque fichier
for (fichier in fichiers) {
# Lire le contenu du fichier
contenu <- readLines(fichier)
contenu_modifie <- gsub("print(", "message(", contenu, fixed = TRUE)
file.edit(fichier)
writeLines(contenu_modifie, fichier)
}
message("Akdaref,ldv zelfcelz")
devtools::submit_cran()
cat("\033[32mVous devez changer la date\n")
cat("Vous devez changer la date")
setwd("~/GitHub/BRVM")
save.image()
