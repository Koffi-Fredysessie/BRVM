)
),
shapes = list(
list(
type = "line",
x1 = as.numeric(as.Date("2013-09-29")),
x2 = as.numeric(as.Date("2013-09-29")),
y1 = 0,
y2 = 1,
stroke = "#FF0000",
strokeWidth = 2
)
)
)) %>%
hc_yAxis(title = list(text = "Cours de clôture"),
opposite = FALSE,
labels = list(style = list(fontSize = "16px", fontFamily = "sans-serif")))
highchart() %>%
hc_xAxis(type = "datetime", dateTimeLabelFormats = list(day = '%d/%m/%Y')) %>%
hc_add_series(data = brvm_allindex_dt[, c("Date", "Close", "Ticker")],
type = "line",
hcaes(x = Date, y = Close, group = Ticker)) %>%
hc_annotations(list(
labels = list(
list(
point = list(x = as.numeric(as.Date("2013-09-29")), y = 0),
text = "29 Septembre 2013",
verticalAlign = "top",
align = "right",
style = list(fontSize = "16px", color = "#FF0000", fontWeight = "bold")
)
),
shapes = list(
list(
type = "line",
x1 = as.numeric(as.Date("2013-09-29")),
x2 = as.numeric(as.Date("2013-09-29")),
y1 = 0,
y2 = 1,
stroke = "#FF0000",
strokeWidth = 2
)
)
)) %>%
hc_yAxis(title = list(text = "Cours de clôture"),
opposite = FALSE,
labels = list(style = list(fontSize = "16px", fontFamily = "sans-serif")))
ggplot(brvm_allindex_dt, aes(x = Date, y = Close, color = Ticker)) +
ylab("Cours de clôture") +
geom_line() +
theme_bw() +
geom_vline(xintercept = as.numeric(as.Date("2013-09-29")), linetype = "dashed", color = "red")
ggplot(brvm_allindex_dt, aes(x = Date, y = Close, color = Ticker)) +
ylab("Cours de clôture") +
geom_line() +
theme_bw() +
geom_vline(xintercept = as.numeric(as.Date("2013-09-29")), linetype = "dashed", color = "red") +
scale_y_continuous(breaks = seq(0, 1500, 500))
ggplot(brvm_allindex_dt, aes(x = Date, y = Close, color = Ticker)) +
ylab("Cours de clôture") +
geom_line() +
theme_bw() +
geom_vline(xintercept = as.numeric(as.Date("2013-09-29")), linetype = "dashed", color = "red") +
scale_y_continuous(limits = c(0, 3000), breaks = seq(0, 3000, 500))
ggplot(brvm_allindex_dt, aes(x = Date, y = Close, color = Ticker)) +
ylab("Cours de clôture") +
geom_line() +
theme_bw() +
geom_vline(xintercept = as.numeric(as.Date("2013-09-29")),
linetype = "dashed", color = "gold") +
scale_y_continuous(limits = c(0, 3000), breaks = seq(0, 3000, 500))
View(Daily_brvm_info)
dput(names(Daily_brvm_info))
str(Daily_brvm_info)
# Calculate liquidity measures
data = Daily_brvm_info
tightness <- spread(data$Close - data$Open, data$Ticker)
data1 <- as.xts(data[,-1], order.by = data$Date)
tightness <- spread(data1$Close - data1$Open, data1$Ticker)
data_xts <- xts(Daily_brvm_info[, 4:11], order.by = Daily_brvm_info$Date)
head(data_xts)
data_xts <- xts(Daily_brvm_info[, c(2,4:11)], order.by = Daily_brvm_info$Date)
head(data_xts)
data_xts <- xts(Daily_brvm_info[, 4:11], order.by = Daily_brvm_info$Date)
returns_xts <- dailyReturn(data_xts)
head(returns_xts)
tightness <- rollapply(returns_xts, width = 30, FUN = sd, na.pad = TRUE)
tightness <- rollapply(returns_xts, width = 30, FUN = sd, fill = NA)
head(tightness)
tail(tightness)
head(tightness,20)
nrow(tightness)
nrow(na.omit(tightness))
depth <- rollapply(returns_xts, width = 30, FUN = function(x) sum(abs(x)), fill = NA)
nrow(na.omit(depth))
nrow((depth))
tail(na.omit(depth))
head(na.omit(depth))
all_tickers
unique(Daily_brvm_info$Ticker)
head(as.data.frame(data_xts))
head(as.data.frame(data_xts, index = TRUE))
data_xts <- as.xts(Daily_brvm_info[, 4:11], order.by = Daily_brvm_info$Date)
head(as.data.frame(data_xts))
head(as.data.frame(data_xts), , coredata(data_xts))
head(data.frame(index(data_xts), coredata(data_xts)))
head(data.frame(index(data_xts), coredata(data_xts)), index = FALSE)
head()
resiliency <- rollapply(returns_xts, width = 30, FUN = function(x) sum(x > 0) / sum(x < 0), fill = NA)
head(resiliency)
tail(resiliency)
tightness <- na.omit(rollapply(returns_xts, width = 5, FUN = sd, fill = NA))
nrow(tightness)
nrow(returns_xts)
rollapply(returns_xts, width = 5, FUN = sd, fill = NA)
depth <- na.omit(rollapply(returns_xts, width = 5, FUN = function(x) sum(abs(x)), fill = NA))
head(resiliency)
breadth <- na.omit(rollapply(returns_xts, width = 5, FUN = function(x) sum(x != 0), fill = NA))
names(breadth)
breadth <- data.frame(index(breadth), coredata(breadth))
names(breadth)
names(breadth) = c('Date','Breadth')
names(breadth)
data_xts <- xts(data_s[, 4:11], order.by = data_s$Date)
data_xts <- xts(data_s[, 4:11], order.by = data_s$Date)
data_s = dplyr::filter(Daily_brvm_info, Daily_brvm_info$Ticker == tick)
tick
data_xts <- xts(data_s[, 4:11], order.by = data_s$Date)
# Faire les calculs en se basant sur les cotations d'il y a 5 jours
# D'où le width = 5
tightness <- na.omit(rollapply(data_xts, width = 5, FUN = sd, fill = NA))
tightness <- data.frame(index(tightness), coredata(tightness))
names(tightness) = c('Date','Tightness')
head(tightness)
View(Daily_brvm_info)
data_s = dplyr::filter(Daily_brvm_info, Daily_brvm_info$Ticker == tick)
names(data_s)
data_xts <- xts(data_s[, c(2,3,8:11)], order.by = data_s$Date)
# Faire les calculs en se basant sur les cotations d'il y a 5 jours
# D'où le width = 5
tightness <- na.omit(rollapply(data_xts, width = 5, FUN = sd, fill = NA))
tightness <- data.frame(index(tightness), coredata(tightness))
names(tightness) = c('Date','Tightness')
head(tightness)
data_xts <- xts(data_s[, -c(2,3,8:11)], order.by = data_s$Date)
tightness <- data.frame(index(tightness), coredata(tightness))
names(tightness)
data_xts <- xts(data_s[, c(4:11)], order.by = data_s$Date)
# Faire les calculs en se basant sur les cotations d'il y a 5 jours
# D'où le width = 5
tightness <- na.omit(rollapply(data_xts, width = 5, FUN = sd, fill = NA))
names(tightness)
data_xts <- xts(data_s[, c(4:7)], order.by = data_s$Date)
# Faire les calculs en se basant sur les cotations d'il y a 5 jours
# D'où le width = 5
tightness <- na.omit(rollapply(data_xts, width = 5, FUN = sd, fill = NA))
names(tightness)
head(tightness)
# data_xts <- xts(data_s[, -c(2,3,8:11)], order.by = data_s$Date)
data_xts <- xts(data_s[, c(4:7)], order.by = data_s$Date)
returns_xts <- dailyReturn(data_xts)
head(returns_xts)
data_xts <- xts(data_s[, c(4:7)], order.by = data_s$Date)
head(data_xts)
# data_xts <- xts(data_s[, -c(2,3,8:11)], order.by = data_s$Date)
data_xts <- xts(data_s[, c(4:11)], order.by = data_s$Date)
head(data_xts)
data_df <- data.frame(index(data_xts), coredata(data_xts))
head(data_df)
dput(names(data_df))
data_df$Ticker = tick
dput(names(data_df))
data_df = data_df[, c(1:6,10,7:9)]
head(data_df)
data_s = dplyr::filter(Daily_brvm_info, Daily_brvm_info$Ticker == tick)
# data_xts <- xts(data_s[, -c(2,3,8:11)], order.by = data_s$Date)
data_xts <- xts(data_s[, c(4:11)], order.by = data_s$Date)
returns_xts <- dailyReturn(data_xts)
# Faire les calculs en se basant sur les cotations d'il y a 5 jours
# D'où le width = 5
tightness <- na.omit(rollapply(returns_xts, width = 5, FUN = sd, fill = NA))
depth <- na.omit(rollapply(returns_xts, width = 5, FUN = function(x) sum(abs(x)), fill = NA))
breadth <- na.omit(rollapply(returns_xts, width = 5, FUN = function(x) sum(x != 0), fill = NA))
immediacy <- na.omit(rollapply(returns_xts, width = 5, FUN = function(x) mean(abs(x)), fill = NA))
resiliency <- na.omit(rollapply(returns_xts, width = 5, FUN = function(x) sum(x > 0) / sum(x < 0), fill = NA))
tightness <- data.frame(index(tightness), coredata(tightness))
names(tightness) = c('Date','Tightness')
depth <- data.frame(index(depth), coredata(depth))
names(depth) = c('Date','Depth')
breadth <- data.frame(index(breadth), coredata(breadth))
names(breadth) = c('Date','Breadth')
immediacy <- data.frame(index(immediacy), coredata(immediacy))
names(immediacy) = c('Date','Immediacy')
resiliency <- data.frame(index(resiliency), coredata(resiliency))
names(resiliency) = c('Date','Resiliency')
# Convert xts to data.frame without index column
data_df <- data.frame(index(data_xts), coredata(data_xts))
data_df$Ticker = tick
names(data_df) = c("Date", "Open", "High", "Low", "Close", "Volume",
"Number of trade", "Market capitalization", "Oustanding shares",
"Ticker")
data_df = data_df[, c(1:6,10,7:9)]
View(data_df)
data_df = data_df%>%
inner_join(tightness, by = c("Date"))%>%
inner_join(depth, by = c("Date"))%>%
inner_join(breadth, by = c("Date"))%>%
inner_join(immediacy, by = c("Date"))%>%
inner_join(`resiliency`, by = c("Date"))
names(Daily_brvm_info)
# Convert to a tidyquant object
df_tq <- Daily_brvm_info%>%
tq_transmute(select = c(Date, Ticker, Open, High, Low, Close, Volume, "Number of trade", "Market capitalization", "Oustanding shares"),
mutate_fun = to_tq_time_series,
index = Date,
select_rename = "Close")
# Convert to a tidyquant object
df_tq <- Daily_brvm_info%>%
tq_transmute(select = c(Date, Ticker, Open, High, Low, Close, Volume, "Number of trade", "Market capitalization", "Oustanding shares"),
mutate_fun = to_quantmod,
select_rename = "Close")
# Convert to a tidyquant object
df_tq <- Daily_brvm_info%>%
tq_transmute(select = c(Date, Ticker, Open, High, Low, Close, Volume, "Number of trade", "Market capitalization", "Oustanding shares"),
mutate_fun = to_xts,
select_rename = "Close")
# Convert to a tidyquant object
df_tq <- Daily_brvm_info%>%
tq_transmute(select = c(Date, Ticker, Open, High, Low, Close, Volume, "Number of trade", "Market capitalization", "Oustanding shares"),
mutate_fun = to_tibble) %>%
group_by(Ticker) %>%
tq_transmute(mutate_fun = to_xts,
select = Close)
# Convert to a tidyquant object
df_tq <- Daily_brvm_info%>%
tq_transmute(select = c(Date, Ticker, Open, High, Low, Close, Volume, "Number of trade", "Market capitalization", "Oustanding shares"),
mutate_fun = identity) %>%
group_by(Ticker) %>%
tq_transmute(mutate_fun = to_xts,
select = Close)
# Convert to a tidyquant object
df_tq <- Daily_brvm_info%>%
tq_transmute(select = c(Date, Ticker, Open, High, Low, Close, Volume, "Number of trade", "Market capitalization", "Oustanding shares"),
mutate_fun = identity) %>%
group_by(Ticker) %>%
tq_transmute(mutate_fun = to_xts,
select = Close)
names(Daily_brvm_info)
dput(names(Daily_brvm_info))
data = Daily_brvm_info[, -3]
dput(names(data))
str(data)
# Convertir la colonne Date en format de date
data$Date <- as.Date(data$Date, format = "%Y-%m-%d")
str(data)
# Définir les tickers à utiliser pour l'analyse
tickers <- unique(data$Ticker)
# Initialiser un dataframe vide pour stocker les résultats de l'analyse de liquidité
liquidity <- data.frame()
# Boucle à travers les tickers et calculer les mesures de liquidité pour chaque ticker
for (ticker in tickers) {
# Sous-ensemble des données pour le ticker actuel
data_sub <- subset(data, Ticker == ticker)
# Calculer le turnover
turnover <- sum(data_sub$Volume) / sum(data_sub$Market.capitalization)
# Calculer la tightness
tightness <- mean((data_sub$High - data_sub$Low) / data_sub$Close)
# Calculer la depth
depth <- sum(data_sub$Volume) / length(data_sub$Volume)
# Calculer la breadth
breadth <- length(data_sub$Volume) / length(unique(data_sub$Date))
# Calculer l'immediacy
immediacy <- mean((data_sub$Close - data_sub$Open) / data_sub$Close)
# Calculer la resiliency
returns <- Delt(data_sub$Close, type = "log")
resiliency <- 1 - (sum(returns[returns < 0]) / sum(abs(returns)))
# Stocker les résultats dans le dataframe de liquidité
liquidity <- rbind(liquidity, data.frame(Ticker = ticker, Turnover = turnover, Tightness = tightness,
Depth = depth, Breadth = breadth, Immediacy = immediacy,
Resiliency = resiliency))
}
view(liquidity)
sum(data$Volume)
# Calculer le turnover
# turnover <- sum(data_sub$Volume) / sum(data_sub$Market.capitalization)
turnover <- data %>%
group_by(Date, Ticker) %>%
summarize(immediacy = sum(`Number of trade`) / sum(Volume))
View(turnover)
dim(data)
# Calculer le turnover
# turnover <- sum(data_sub$Volume) / sum(data_sub$Market.capitalization)
Daily_liquidity <- data %>%
group_by(Date, Ticker) %>%
summarize(Turnover = sum(Volume) / mean(`Market capitalization`),
Tightness = (max(High) - min(Low)) / mean(Close),
Immediacy = sum(`Number of trade`) / sum(Volume),
Depth = sum(Volume) / sum(`Number of trade`),
Width = (sum(Volume[Close > Open]) - sum(Volume[Close < Open])) / sum(Volume),
Resilience = (Close - Open) / (High - Low))
View(Daily_liquidity)
setDT(data)
# calculate liquidity measures
Daily_liquidity <- data[, .(Turnover = sum(Volume) / mean(`Market capitalization`),
Tightness = (max(High) - min(Low)) / mean(Close),
Immediacy = sum(`Number of trade`) / sum(Volume),
Depth = sum(Volume) / sum(`Number of trade`),
Width = (sum(Volume[Close > Open]) - sum(Volume[Close < Open])) / sum(Volume),
Resilience = (Close - Open) / (High - Low)),
by = .(Date, Ticker)]
nrow(Daily_liquidity)
nrow(data)
names(data)
dput(names(data))
Daily_liquidity <- data[, .(Open, High, Low, Close, Volume, `Number of trade`, `Market capitalization`, `Oustanding shares`,
Turnover = sum(Volume) / mean(`Market capitalization`),
Tightness = (max(High) - min(Low)) / mean(Close),
Immediacy = sum(`Number of trade`) / sum(Volume),
Depth = sum(Volume) / sum(`Number of trade`),
Width = (sum(Volume[Close > Open]) - sum(Volume[Close < Open])) / sum(Volume),
Resilience = (Close - Open) / (High - Low)),
by = .(Date, Ticker)]
dim(best_limit)
BRVM_Liq_measure <- best_limit %>%
group_by(Date, Ticker) %>%
summarize(Open = first(Open),
High = max(High),
Low = min(Low),
Close = last(Close),
Volume = sum(Volume),
`Number of trade` = sum(`Number of trade`),
`Market capitalization` = first(`Market capitalization`),
`Outstanding shares` = first(`Outstanding shares`),
BID = mean(BID), # agrégation Bid
ASK = mean(ASK), # agrégation Ask
`Mid quote` = ((ASK + BID)/2),
Spread = max(ASK) - min(BID),
Tightness = Spread / `Mid quote`,
Depth = sum(BID) + sum(ASK),
Breadth = n(), # Also called Width
Immediacy = median(ASK - BID),
Resiliency = (max(BID) - min(ASK)) / (max(BID) + min(ASK)),
`Proportional quoted spread` = (ASK - BID) / ((ASK + BID) / 2),
`Log quoted spread` = log(ASK / BID),
`Log quoted size` = log(ASK) + log(BID),
`Log quoted slope` = `Log quoted spread` / `Log quoted size`,
`Midquote square return` = (log((BID + ASK) / 2) - log((lag(BID) + lag(ASK)) / 2))^2,
`Midquote absolute return` = abs(log((BID + ASK) / 2) - log((lag(BID) + lag(ASK)) / 2))
)
BRVM_Liq_measure <- best_limit %>%
group_by(Date, Ticker) %>%
summarize(Open = mean(Open),
High = max(High),
Low = min(Low),
Close = mean(Close),
Volume = sum(Volume),
`Number of trade` = sum(`Number of trade`),
`Market capitalization` = mean(`Market capitalization`),
`Oustanding shares` = mean(`Oustanding shares`),
BID = mean(BID),
ASK= mean(ASK),
`Mid quote` = ((ASK + BID)/2),
Spread = max(ASK) - min(BID),
Tightness = Spread / `Mid quote`,
Depth = sum(BID) + sum(ASK),
Breadth = n(),
Width = `Mid quote` * Spread,
Immediacy = median(ASK - BID),
Resiliency = (max(BID) - min(ASK)) / (max(BID) + min(ASK)),
`Proportional quoted spread` = (ASK - BID)/ ((ASK + BID)/2),
`Log quoted spread` = log(ASK/BID),
`Log quoted size` = log(ASK)+log(BID),
`Log quoted slope` = `Log quoted spread`/`Log quoted size`,
`Midquote square return` = (log((BID + ASK)/2) - log((lag(BID) + lag(ASK))/2))^2,
`Midquote absolute return` = abs(log((BID + ASK)/2) - log((lag(BID) + lag(ASK))/2))
)
BRVM_Liq_measure <- best_limit %>%
group_by(Date, Ticker, Open) %>%
summarize(BID = mean(BID),                          #agrégation Bid
ASK= mean(ASK),                           #agrégation Ask
# Les codes ci-dessous servent à Calculer les proxies ou benchmarks
`Mid quote` = ((ASK + BID)/2),
Spread = max(ASK) - min(BID),
Tightness = Spread / `Mid quote`,
Depth = sum(BID) + sum(ASK),
Breadth = n(), #Also called Width
# Width = `Mid quote` * Spread
Immediacy = median(ASK - BID),
Resiliency = (max(BID) - min(ASK)) / (max(BID) + min(ASK)),
`Proportional quoted spread` = (ASK - BID)/ ((ASK + BID)/2),
`Log quoted spread` = log(ASK/BID),
`Log quoted size` = log(ASK)+log(BID),
`Log quoted slope` = `Log quoted spread`/`Log quoted size`,
`Midquote square return` = (log((BID + ASK)/2) - log((lag(BID) + lag(ASK))/2))^2,
`Midquote absolute return` = abs(log((BID + ASK)/2) - log((lag(BID) + lag(ASK))/2))
)
BRVM_Liq_measure <- best_limit %>%
group_by(Date, Ticker, Open) %>%
summarize(BID = mean(BID),                          #agrégation Bid
ASK= mean(ASK),                           #agrégation Ask
# Les codes ci-dessous servent à Calculer les proxies ou benchmarks
`Mid quote` = ((ASK + BID)/2),
Spread = max(ASK) - min(BID),
Tightness = Spread / `Mid quote`,
Depth = sum(BID) + sum(ASK),
Breadth = n(), #Also called Width
# Width = `Mid quote` * Spread
Immediacy = median(ASK - BID),
Resiliency = (max(BID) - min(ASK)) / (max(BID) + min(ASK)),
`Proportional quoted spread` = (ASK - BID)/ ((ASK + BID)/2),
`Log quoted spread` = log(ASK/BID),
`Log quoted size` = log(ASK)+log(BID),
`Log quoted slope` = `Log quoted spread`/`Log quoted size`,
`Midquote square return` = (log((BID + ASK)/2) - log((lag(BID) + lag(ASK))/2))^2,
`Midquote absolute return` = abs(log((BID + ASK)/2) - log((lag(BID) + lag(ASK))/2))
)
BRVM_Liq_measure <- best_limit %>%
group_by(Date, Ticker) %>%
summarize(BID = mean(BID),                          #agrégation Bid
ASK= mean(ASK),                           #agrégation Ask
# Les codes ci-dessous servent à Calculer les proxies ou benchmarks
`Mid quote` = ((ASK + BID)/2),
Spread = max(ASK) - min(BID),
Tightness = Spread / `Mid quote`,
Depth = sum(BID) + sum(ASK),
Breadth = n(), #Also called Width
# Width = `Mid quote` * Spread
Immediacy = median(ASK - BID),
Resiliency = (max(BID) - min(ASK)) / (max(BID) + min(ASK)),
`Proportional quoted spread` = (ASK - BID)/ ((ASK + BID)/2),
`Log quoted spread` = log(ASK/BID),
`Log quoted size` = log(ASK)+log(BID),
`Log quoted slope` = `Log quoted spread`/`Log quoted size`,
`Midquote square return` = (log((BID + ASK)/2) - log((lag(BID) + lag(ASK))/2))^2,
`Midquote absolute return` = abs(log((BID + ASK)/2) - log((lag(BID) + lag(ASK))/2))
)
View(final_daily)
library(data.table)
# convertir le data.frame en data.table
setDT(best_limit)
# Agréger les données par Date et Ticker et créer les nouvelles colonnes
BRVM_Liq_measure <- best_limit[, .(
BID = mean(BID),
ASK = mean(ASK),
`Mid quote` = mean((ASK + BID) / 2),
Spread = max(ASK) - min(BID),
Tightness = (max(ASK) - min(BID)) / mean((ASK + BID) / 2),
Depth = sum(BID) + sum(ASK),
Breadth = .N,
Immediacy = median(ASK - BID),
Resiliency = (max(BID) - min(ASK)) / (max(BID) + min(ASK)),
`Proportional quoted spread` = (ASK - BID) / ((ASK + BID) / 2),
`Log quoted spread` = log(ASK / BID),
`Log quoted size` = log(ASK) + log(BID),
`Log quoted slope` = log(ASK / BID) / (log(ASK) + log(BID)),
`Midquote square return` = ((log((BID + ASK) / 2) - shift(log((BID + ASK) / 2))) ^ 2),
`Midquote absolute return` = abs(log((BID + ASK) / 2) - shift(log((BID + ASK) / 2)))
), by = .(Date, Ticker)]
BRVM_Liq_measure <- best_limit %>%
group_by(Date, Ticker) %>%
summarize(BID = mean(BID),
ASK = mean(ASK),
Spread = max(ASK) - min(BID),
`Mid quote` = (ASK + BID) / 2,
Tightness = Spread / `Mid quote`,
Depth = sum(BID) + sum(ASK),
Breadth = n(),
Immediacy = median(ASK - BID),
Resiliency = (max(BID) - min(ASK)) / (max(BID) + min(ASK)),
`Proportional quoted spread` = (ASK - BID) / `Mid quote`,
`Log quoted spread` = log(ASK / BID),
`Log quoted size` = log(ASK * BID),
`Log quoted slope` = `Log quoted spread` / `Log quoted size`,
`Midquote square return` = (log((ASK + BID) / 2) - log((lag(BID) + lag(ASK)) / 2))^2,
`Midquote absolute return` = abs(log((ASK + BID) / 2) - log((lag(BID) + lag(ASK)) / 2))
)
View(BRVM_Liq_measure)
(unique(best_limit$Ticker))
best_limit = best_limit%>%
#     subset(Ticker != "ORAC")
# convertir le data.frame en data.table
setDT(best_limit)
(unique(best_limit$Ticker))
view(best_limit)
best_limit = best_limit%>%
subset(Ticker != "ORAC")
# convertir le data.frame en data.table
setDT(best_limit)
(unique(best_limit$Ticker))
write_xlsx(list("Sheet 1" = BRVM_Liq_measure,
"Sheet 2" = Daily_liquidity,
"Sheet 3" = best_limit),
"BRVM et ses mesures de liquidité.xlsx"
# , append = TRUE
)
View(data)
setDT(data)
# calculate liquidity measures
Daily_liquidity <- data[, .(Open, High, Low, Close, Volume, `Number of trade`, `Market capitalization`, `Oustanding shares`,
Turnover = sum(Volume) / mean(`Market capitalization`),
Tightness = (max(High) - min(Low)) / mean(Close),
Immediacy = sum(`Number of trade`) / sum(Volume),
Depth = sum(Volume) / sum(`Number of trade`),
Width = (sum(Volume[Close > Open]) - sum(Volume[Close < Open])) / sum(Volume),
# Resilience = (Close - Open) / (High - Low),
Resilience = (Close - Low) / (High - Low)),
by = .(Date, Ticker)]
nrow(Daily_liquidity$Resilience)
length(Daily_liquidity$Resilience)
length(na.omit(Daily_liquidity$Resilience))
length(na.omit(Daily_liquidity$Resilience)) - 77602
save.image()
