# if (str_sub(stock_data[NROW(stock_data),1], 1,13) == "TOTAL - March") {
#     stock_data[NROW(stock_data),1:2] = "TOTAL - Equities market"
# }
###Remove duplication for sector name
stock_data[c(1, 15, 21, 38, 42, 49, 58),-c(1,5)] <- ""
##For total
stock_data[c(14, 20, 37, 41, 48, 57, 60, 61),2] <- ""
#stock_data<- stock_data[, -8]   #Remove the moy
for (i in 1 : nrow(stock_data)){
for (j in 3 :length(stock_data)){
stock_data[i, j] <- gsub(" " , "", stock_data[i, j])
stock_data[i, j] <- gsub("," , ".", stock_data[i, j])
}
}
stock_data$`Change (%)` <- gsub("%" , "", stock_data$`Change (%)`)
stock_data$`Yield Net (%)` <- gsub("%" , "", stock_data$`Yield Net (%)`)
stock_data$`Annual change (%)` <- gsub("%" , "", stock_data$`Annual change (%)`)
#        stock_data$Volume <- as.numeric(stock_data$Volume)
# stock_data$Value <- as.numeric(stock_data$Value)
stock_data$`Change (%)` <- as.numeric(stock_data$`Change (%)`)
# stock_data$`Annual change (%)` <- as.numeric(stock_data$`Annual change (%)`)
# stock_data$`Reference price` <- as.numeric(stock_data$`Reference price`)
# stock_data$`Low` <- as.numeric(stock_data$`Low`)
# stock_data$High <- as.numeric(stock_data$High)
# stock_data$`Net Income` <- as.numeric(stock_data$`Net Income`)
# stock_data$`Yield Net (%)` <- as.numeric(stock_data$`Yield Net (%)`)
# stock_data$PER <- as.numeric(stock_data$PER)
# stock_data$Date <- as.Date.character(stock_data$Date, format = "%d/%m/%Y")
stock_data$Compartment <- as.factor(stock_data$Compartment)
stock_data<- formattable(stock_data,
align =c("l","l", "c", "r", "c","c", "c", "l",
"c", "c", "c","c", "c", "c","c", "c", "c"),
list(`Close` = color_tile("transparent", "lightpink"),
`Change (%)` = formatter("span",
style = x ~ style(font.weight = "bold",
color = ifelse(x<0, "red",
ifelse(x > 0, "green", "black"))),
x ~ icontext(ifelse(x>0, "arrow-up",
ifelse(x<0,"arrow-down","")),
round(x,2)))
))
#Add to renderformattable
# improvement_formatter <- formatter("span",
#                                    style = x ~ style(font.weight = "bold",
#                                                      color = ifelse(x > 0, "green", ifelse(x < 0, "red","black"))),
#                                    x ~ icontext(ifelse(x < 0, "arrow-down", "arrow-up"), x)
# )
#
# stock_data <- formattable(stock_data,
# align =c("l","l", "c", "c", "c","c", "c", "c",
#          "c", "c", "c","c", "c", "c","c", "c", "c"),
#                           list(`Close` = color_tile("transparent", "green"),
#                                `Change (%)` = improvement_formatter,
#                                `Volume` = color_tile("transparent", "pink")
#                           ))
# stock_data <- kable(stock_data)%>%
#   kable_minimal()%>%  #This one is th best
#   #    kable_paper("striped", full_width =F)%>%
#   add_header_above(c(" " = 2,
#                      "Day summary" = 2,
#                      " " = 1,
#                      "Share price" = 2,
#                      " " = 3,
#                      "Maximum deviations" = 2,
#                      "Last dividend paid" =2,
#                      " "= 3))
return(stock_data)
} else {
message("The date to be entered must not be a public holiday")
}
View(stock_data)
stock_data <- stock_data[[1]]
stock_data <- content(res, encoding = "UTF-8") %>%
rvest::html_elements('table') %>%
rvest::html_table()
stock_data <- stock_data[[1]]
colnames(stock_data) <- c("Ticker", "Equity", "Volume", "Value", "Previous price",
"Open", "Close", "Mean", "Change (%)", "Annual change (%)",
"Reference price", "Low", "High", "Net Income", "Date",
"Compartment", "Yield Net (%)", "PER")
##Remove first line
stock_data <- stock_data[-1,]
stock_data<- stock_data[, -8] # remove column 8 (mean)
stock_data[1,1]
stock_data[2,1]
stock_data[3,1]
stock_data[1,1]
stock_data[[1,1]]
str_sub(stock_data[[1,1]], 1,13)
str_sub(stock_data[[1,1]], 1,12)
which(str_sub(stock_data[[1]], 1,12) == "COMPARTIMENT")
stock_data[c(1, 15, 21, 38, 42, 49, 58),-c(1,5)]
tail(stock_data[c(1, 15, 21, 38, 42, 49, 58),-c(1,5)])
str_sub(stock_data[[1]], 1,13)
which(stock_data[[1]] == "TOTAL")
BRVM_stock_market <- function(.weekday){
the_date <- lubridate::parse_date_time(.weekday, orders = "ymd")
#  the_date <- as.POSIXct(.weekday)
if (the_date < Sys.Date()) {
tryCatch(
{
if (isWeekday(the_date)) {
#      "http://www.abourse.com/histoActionsJour.html/status/200"
res <- POST("http://www.abourse.com/histoActionsJour.html",
body = list(date = the_date,
submit = "Valider"),
encode = "form")
stock_data <- content(res, encoding = "UTF-8") %>%
rvest::html_elements('table') %>%
rvest::html_table()
if (length(stock_data)!=0) {
stock_data <- stock_data[[1]]
colnames(stock_data) <- c("Ticker", "Equity", "Volume", "Value", "Previous price",
"Open", "Close", "Mean", "Change (%)", "Annual change (%)",
"Reference price", "Low", "High", "Net Income", "Date",
"Compartment", "Yield Net (%)", "PER")
##Remove first line
stock_data <- stock_data[-1,]
stock_data<- stock_data[, -8] # remove column 8 (mean)
for (i in 1 : nrow(stock_data)){
if (stock_data[i,1] == "SECTEUR - Industrie"){
stock_data[i,1:4] = "INDUSTRY SECTOR"
}
else if (stock_data[i,1] == "SECTEUR - Services Publics" ){
stock_data[i,1:4] = " PUBLIC SERVICES SECTOR"
}
else if (stock_data[i,1] == "SECTEUR - Finances" ){
stock_data[i,1:4] = "FINANCE SECTOR"
}
else if (stock_data[i,1] == "SECTEUR - Transport" ){
stock_data[i,1:4] = "TRANSPORT SECTOR"
}
else if (stock_data[i,1] == "SECTEUR - Agriculture" ){
stock_data[i,1:4] = "AGRICULTURE SECTOR"
}
else if (stock_data[i,1] == "SECTEUR - Distribution" ){
stock_data[i,1:4] = "DISTRIBUTION SECTOR"
}
else if (stock_data[i,1] == "SECTEUR - Autres Secteurs" ){
stock_data[i,1:4] = "OTHER SECTOR"
}
else if (str_sub(stock_data[i,1], 1,13) == "TOTAL - March" ){
stock_data[i,1:2] = "TOTAL - Equities market"
}
# else if (stock_data[i,1] == "TOTAL - MarchÃ© des actions" ){
#   stock_data[i,1:2] = "TOTAL - Equities market"
# }
}
# if (str_sub(stock_data[NROW(stock_data),1], 1,13) == "TOTAL - March") {
#     stock_data[NROW(stock_data),1:2] = "TOTAL - Equities market"
# }
########################################
cmp_line <- which(str_sub(stock_data[[1]], 1,12) == "COMPARTIMENT")
total_line <- which(stock_data[[1]] == "TOTAL")
###Remove duplication for sector name
# stock_data[c(1, 15, 21, 38, 42, 49, 58),-c(1,5)] <- ""
stock_data[cmp_line, -c(1,5)] <- ""
##For total
# stock_data[c(14, 20, 37, 41, 48, 57, 60, 61),2] <- ""
stock_data[total_line, 2] <- ""
#stock_data<- stock_data[, -8]   #Remove the moy
for (i in 1 : nrow(stock_data)){
for (j in 3 :length(stock_data)){
stock_data[i, j] <- gsub(" " , "", stock_data[i, j])
stock_data[i, j] <- gsub("," , ".", stock_data[i, j])
}
}
stock_data$`Change (%)` <- gsub("%" , "", stock_data$`Change (%)`)
stock_data$`Yield Net (%)` <- gsub("%" , "", stock_data$`Yield Net (%)`)
stock_data$`Annual change (%)` <- gsub("%" , "", stock_data$`Annual change (%)`)
#        stock_data$Volume <- as.numeric(stock_data$Volume)
# stock_data$Value <- as.numeric(stock_data$Value)
stock_data$`Change (%)` <- as.numeric(stock_data$`Change (%)`)
# stock_data$`Annual change (%)` <- as.numeric(stock_data$`Annual change (%)`)
# stock_data$`Reference price` <- as.numeric(stock_data$`Reference price`)
# stock_data$`Low` <- as.numeric(stock_data$`Low`)
# stock_data$High <- as.numeric(stock_data$High)
# stock_data$`Net Income` <- as.numeric(stock_data$`Net Income`)
# stock_data$`Yield Net (%)` <- as.numeric(stock_data$`Yield Net (%)`)
# stock_data$PER <- as.numeric(stock_data$PER)
# stock_data$Date <- as.Date.character(stock_data$Date, format = "%d/%m/%Y")
stock_data$Compartment <- as.factor(stock_data$Compartment)
stock_data<- formattable(stock_data,
align =c("l","l", "c", "r", "c","c", "c", "l",
"c", "c", "c","c", "c", "c","c", "c", "c"),
list(`Close` = color_tile("transparent", "lightpink"),
`Change (%)` = formatter("span",
style = x ~ style(font.weight = "bold",
color = ifelse(x<0, "red",
ifelse(x > 0, "green", "black"))),
x ~ icontext(ifelse(x>0, "arrow-up",
ifelse(x<0,"arrow-down","")),
round(x,2)))
))
#Add to renderformattable
# improvement_formatter <- formatter("span",
#                                    style = x ~ style(font.weight = "bold",
#                                                      color = ifelse(x > 0, "green", ifelse(x < 0, "red","black"))),
#                                    x ~ icontext(ifelse(x < 0, "arrow-down", "arrow-up"), x)
# )
#
# stock_data <- formattable(stock_data,
# align =c("l","l", "c", "c", "c","c", "c", "c",
#          "c", "c", "c","c", "c", "c","c", "c", "c"),
#                           list(`Close` = color_tile("transparent", "green"),
#                                `Change (%)` = improvement_formatter,
#                                `Volume` = color_tile("transparent", "pink")
#                           ))
# stock_data <- kable(stock_data)%>%
#   kable_minimal()%>%  #This one is th best
#   #    kable_paper("striped", full_width =F)%>%
#   add_header_above(c(" " = 2,
#                      "Day summary" = 2,
#                      " " = 1,
#                      "Share price" = 2,
#                      " " = 3,
#                      "Maximum deviations" = 2,
#                      "Last dividend paid" =2,
#                      " "= 3))
return(stock_data)
} else {
message("The date to be entered must not be a public holiday")
}
} else {
message("The date to be entered must not be a weekend")
}
},
error = function(e) {
message("Make sure you have an active internet connection")
},
warning = function(w) {
message("Make sure you have an active internet connection")
}
)
} else {
message("The date to be entered must not be greater than or equal to today's date")
}
}
BRVM_stock_market("2024-12-06")
library(formattable)
library(rvest)
library(httr)
BRVM_stock_market("2024-12-06")
library(stringr)
View(stock_data)
stock_data <- content(res, encoding = "UTF-8") %>%
rvest::html_elements('table') %>%
rvest::html_table()
print(length(stock_data))
stock_data <- stock_data[[1]]
names(stock_data)
which(names(stock_data)== "")
empty_col <- which(names(stock_data)== "")
empty_col
is.null(empty_col)
!is.null(empty_col)
if(!is.null(empty_col)){
stock_data <- stock_data[, - empty_col]
}
dput(names(stock_data))
length(c("Ticker", "Equity", "Volume", "Value", "Previous price",
"Open", "Close", "Mean", "Change (%)", "Annual change (%)",
"Reference price", "Low", "High", "Net Income", "Date",
"Compartment", "Yield Net (%)", "PER"))
(ncol(stock_data))
length(c("Ticker", "Equity", "Volume", "Value", "Previous price",
"Open", "Close", "Mean", "Change (%)", "Annual change (%)",
"Reference price",
# "Low", "High",
"Net Income", "Date",
"Compartment", "Yield Net (%)", "PER"))
BRVM_stock_market <- function(.weekday){
the_date <- lubridate::parse_date_time(.weekday, orders = "ymd")
#  the_date <- as.POSIXct(.weekday)
if (the_date < Sys.Date()) {
tryCatch(
{
if (isWeekday(the_date)) {
#      "http://www.abourse.com/histoActionsJour.html/status/200"
res <- POST("http://www.abourse.com/histoActionsJour.html",
body = list(date = the_date,
submit = "Valider"),
encode = "form")
stock_data <- content(res, encoding = "UTF-8") %>%
rvest::html_elements('table') %>%
rvest::html_table()
print(length(stock_data))
if (length(stock_data)!=0) {
stock_data <- stock_data[[1]]
empty_col <- which(names(stock_data)== "")
if(!is.null(empty_col)){
stock_data <- stock_data[, - empty_col]
}
# colnames(stock_data) <- c("Ticker", "Equity", "Volume", "Value", "Previous price",
#                           "Open", "Close", "Mean", "Change (%)", "Annual change (%)",
#                           "Reference price", "Low", "High", "Net Income", "Date",
#                           "Compartment", "Yield Net (%)", "PER")
colnames(stock_data) <- c("Ticker", "Equity", "Volume", "Value", "Previous price",
"Open", "Close", "Mean", "Change (%)", "Annual change (%)",
"Reference price",
# "Low", "High",
"Net Income", "Date",
"Compartment", "Yield Net (%)", "PER")
##Remove first line
stock_data <- stock_data[-1,]
stock_data<- stock_data[, -8] # remove column 8 (mean)
for (i in 1 : nrow(stock_data)){
if (stock_data[i,1] == "SECTEUR - Industrie"){
stock_data[i,1:4] = "INDUSTRY SECTOR"
}
else if (stock_data[i,1] == "SECTEUR - Services Publics" ){
stock_data[i,1:4] = " PUBLIC SERVICES SECTOR"
}
else if (stock_data[i,1] == "SECTEUR - Finances" ){
stock_data[i,1:4] = "FINANCE SECTOR"
}
else if (stock_data[i,1] == "SECTEUR - Transport" ){
stock_data[i,1:4] = "TRANSPORT SECTOR"
}
else if (stock_data[i,1] == "SECTEUR - Agriculture" ){
stock_data[i,1:4] = "AGRICULTURE SECTOR"
}
else if (stock_data[i,1] == "SECTEUR - Distribution" ){
stock_data[i,1:4] = "DISTRIBUTION SECTOR"
}
else if (stock_data[i,1] == "SECTEUR - Autres Secteurs" ){
stock_data[i,1:4] = "OTHER SECTOR"
}
else if (str_sub(stock_data[i,1], 1,13) == "TOTAL - March" ){
stock_data[i,1:2] = "TOTAL - Equities market"
}
# else if (stock_data[i,1] == "TOTAL - MarchÃ© des actions" ){
#   stock_data[i,1:2] = "TOTAL - Equities market"
# }
}
# if (str_sub(stock_data[NROW(stock_data),1], 1,13) == "TOTAL - March") {
#     stock_data[NROW(stock_data),1:2] = "TOTAL - Equities market"
# }
########################################
cmp_line <- which(str_sub(stock_data[[1]], 1,12) == "COMPARTIMENT")
total_line <- which(stock_data[[1]] == "TOTAL")
###Remove duplication for sector name
# stock_data[c(1, 15, 21, 38, 42, 49, 58),-c(1,5)] <- ""
stock_data[cmp_line, -c(1,5)] <- ""
##For total
# stock_data[c(14, 20, 37, 41, 48, 57, 60, 61),2] <- ""
stock_data[total_line, 2] <- ""
#stock_data<- stock_data[, -8]   #Remove the moy
for (i in 1 : nrow(stock_data)){
for (j in 3 :length(stock_data)){
stock_data[i, j] <- gsub(" " , "", stock_data[i, j])
stock_data[i, j] <- gsub("," , ".", stock_data[i, j])
}
}
stock_data$`Change (%)` <- gsub("%" , "", stock_data$`Change (%)`)
stock_data$`Yield Net (%)` <- gsub("%" , "", stock_data$`Yield Net (%)`)
stock_data$`Annual change (%)` <- gsub("%" , "", stock_data$`Annual change (%)`)
#        stock_data$Volume <- as.numeric(stock_data$Volume)
# stock_data$Value <- as.numeric(stock_data$Value)
stock_data$`Change (%)` <- as.numeric(stock_data$`Change (%)`)
# stock_data$`Annual change (%)` <- as.numeric(stock_data$`Annual change (%)`)
# stock_data$`Reference price` <- as.numeric(stock_data$`Reference price`)
# stock_data$`Low` <- as.numeric(stock_data$`Low`)
# stock_data$High <- as.numeric(stock_data$High)
# stock_data$`Net Income` <- as.numeric(stock_data$`Net Income`)
# stock_data$`Yield Net (%)` <- as.numeric(stock_data$`Yield Net (%)`)
# stock_data$PER <- as.numeric(stock_data$PER)
# stock_data$Date <- as.Date.character(stock_data$Date, format = "%d/%m/%Y")
stock_data$Compartment <- as.factor(stock_data$Compartment)
stock_data<- formattable(stock_data,
align =c("l","l", "c", "r", "c","c", "c", "l",
"c", "c", "c","c", "c", "c","c", "c", "c"),
list(`Close` = color_tile("transparent", "lightpink"),
`Change (%)` = formatter("span",
style = x ~ style(font.weight = "bold",
color = ifelse(x<0, "red",
ifelse(x > 0, "green", "black"))),
x ~ icontext(ifelse(x>0, "arrow-up",
ifelse(x<0,"arrow-down","")),
round(x,2)))
))
#Add to renderformattable
# improvement_formatter <- formatter("span",
#                                    style = x ~ style(font.weight = "bold",
#                                                      color = ifelse(x > 0, "green", ifelse(x < 0, "red","black"))),
#                                    x ~ icontext(ifelse(x < 0, "arrow-down", "arrow-up"), x)
# )
#
# stock_data <- formattable(stock_data,
# align =c("l","l", "c", "c", "c","c", "c", "c",
#          "c", "c", "c","c", "c", "c","c", "c", "c"),
#                           list(`Close` = color_tile("transparent", "green"),
#                                `Change (%)` = improvement_formatter,
#                                `Volume` = color_tile("transparent", "pink")
#                           ))
# stock_data <- kable(stock_data)%>%
#   kable_minimal()%>%  #This one is th best
#   #    kable_paper("striped", full_width =F)%>%
#   add_header_above(c(" " = 2,
#                      "Day summary" = 2,
#                      " " = 1,
#                      "Share price" = 2,
#                      " " = 3,
#                      "Maximum deviations" = 2,
#                      "Last dividend paid" =2,
#                      " "= 3))
return(stock_data)
} else {
message("The date to be entered must not be a public holiday")
}
} else {
message("The date to be entered must not be a weekend")
}
},
error = function(e) {
message("Make sure you have an active internet connection")
},
warning = function(w) {
message("Make sure you have an active internet connection")
}
)
} else {
message("The date to be entered must not be greater than or equal to today's date")
}
}
BRVM_stock_market("2024-12-06")
BRVM_stock_market("2022-04-25")
# all.tickers <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1RZ4uh4O8klBgo14eL-JyRL-UbbcAVkC_UY5Ouk4FNRE/edit#gid=581510196")
all.tickers <- xml2::read_html("https://www.brvm.org/en/cours-actions/0/") %>%
rvest::html_elements('table') %>%
rvest::html_table()
View(all.tickers)
all.tickers[[4]]
all.tickers[[4]][1:2]
BRVM_tickers <- function(){
tryCatch(
{
# all.tickers <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1RZ4uh4O8klBgo14eL-JyRL-UbbcAVkC_UY5Ouk4FNRE/edit#gid=581510196")
all.tickers <- xml2::read_html("https://www.brvm.org/en/cours-actions/0/") %>%
rvest::html_elements('table') %>%
rvest::html_table()
all.tickers <- all.tickers[[4]]
all.tickers <- all.tickers[1:2]
# message(all.tickers)
colnames(all.tickers)<-c(
"Ticker",
"Company name")
all.tickers <- tibble::as.tibble(all.tickers)
return(all.tickers)
},
error = function(e) {
message("Make sure you have an active internet connection")
},
warning = function(w) {
message("Make sure you have an active internet connection")
}
)
}
BRVM_tickers()
library(xml2)
BRVM_tickers()
quotes_tbl <- xml2::read_html("https://www.brvm.org/fr/cours-actions/0") %>%
rvest::html_elements('table') %>%
rvest::html_table()
View(quotes_tbl)
BRVM_direction <- function(.up_or_down = "Up") {
# Set params ----
up_down <- tolower(as.character(.up_or_down))
# Check params ----
if (!is.character(up_down)){
rlang::abort(
"The '.up_or_down' parameters must be set to either up or down."
)
} else {
# get data ----
# quotes_tbl <- gsheet::gsheet2tbl("https://docs.google.com/spreadsheets/d/1rdjGjlQg7cUzWAEJFikrxOnisk-yQQx-n652sJUL-qc/edit#gid=0")
quotes_tbl <- xml2::read_html("https://www.brvm.org/fr/cours-actions/0") %>%
rvest::html_elements('table') %>%
rvest::html_table()
quotes_tbl <- quotes_tbl[[4]]
names(quotes_tbl) <- c("Symbol", "Name", "Volume",
"Previous price  (FCFA)", "Opening price (FCFA)",
"Closing price  (FCFA)", "Change_percent")
quotes_tbl$Change_percent <- gsub(",", ".", quotes_tbl$Change_percent)
quotes_tbl$Change_percent <- as.numeric(quotes_tbl$Change_percent)
quotes_tbl <- quotes_tbl[-c(3:6)]
if (up_down == "up") {
ret <- dplyr::arrange(quotes_tbl, dplyr::desc(quotes_tbl$Change_percent)) %>%
dplyr::slice(1:nrow(quotes_tbl))
ret <- dplyr::as_tibble(ret)
names(ret) <- c("Symbole", "Nom", "Variation in percentage")
# Return data ----
return(ret)
} else if (up_down == "down") {
quotes_tbl$rank <- rank(quotes_tbl$Change_percent)
quotes_tbl <- quotes_tbl[order(quotes_tbl$rank), ]
ret <- quotes_tbl %>%
dplyr::slice(1:nrow(quotes_tbl)) %>%
dplyr::select(-rank)
ret <- dplyr::as_tibble(ret)
names(ret) <- c("Symbol", "Name", "Variation in percentage")
# Return data ----
return(ret)
} else{
message(paste0("'",up_down, "' is not correct! ","Choose 'Up' or 'Down' instead!"))
}
}
}
BRVM_direction("Up")
quotes_tbl <- rvest::read_html("https://www.brvm.org/fr/cours-actions/0") %>%
rvest::html_elements('table') %>%
rvest::html_table()
