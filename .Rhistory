Decision = case_when(
RPW > -20 ~ "Achat",
RPW < -80 ~ "Vente",
TRUE ~ "Conserver"
)
)
}
# Apply the function to calculate RPW and Decision
dt_price_with_rpw_decision <- calculate_rpw_decision(dt_price)
# Display the result
print(dt_price_with_rpw_decision)
view(dt_price_with_rpw_decision)
View(dt_price_with_rpw_decision)
# Function to calculate RPW and Decision
calculate_rpw_decision <- function(dt, period = 14) {
dt %>%
mutate(
RPW = (rollmax(High, period, align = "right", fill = NA) - Close) /
(rollmax(High, period, align = "right", fill = NA) - rollapply(Low, period, min, align = "right", fill = NA)) * -100,
Decision = case_when(
RPW > -20 ~ "Achat",
RPW < -80 ~ "Vente",
TRUE ~ "Conserver"
)
)
}
dt_price <- read_excel("C:/Users/koffi/Downloads/Data_Kamel.xlsx")
dt_price <- dt_price[, c(1:5)]
colnames(dt_price) <- c("Date", "Close", "Open", "High", "Low")
dt_price <- dt_price[, c(1,3:5,2)]
# Apply the function to calculate RPW and Decision using the default period of 14 days
dt_price_with_rpw_decision <- calculate_rpw_decision(dt_price)
# Function to calculate RPW and Decision
calculate_rpw_decision <- function(dt, period = 14) {
dt %>%
mutate(
RPW = (rollmax(High, period, align = "right", fill = NA) - Close) /
(rollmax(High, period, align = "right", fill = NA) - rollapply(Low, period, min, align = "right", fill = NA)) * -100,
Decision = case_when(
RPW > -20 ~ "Achat",
RPW < -80 ~ "Vente",
is.na(RPW) ~ NA_character_,
TRUE ~ "Conserver"
)
)
}
# Apply the function to calculate RPW and Decision using the default period of 14 days
dt_price_with_rpw_decision <- calculate_rpw_decision(dt_price)
# Function to calculate RPW and Decision
calculate_rpw_decision <- function(dt, period = 14) {
dt %>%
arrange(Date) %>% # Tri par ordre chronologique
mutate(
RPW = (rollmax(High, period, align = "right", fill = NA) - Close) /
(rollmax(High, period, align = "right", fill = NA) - rollapply(Low, period, min, align = "right", fill = NA)) * -100,
Decision = case_when(
RPW > -20 ~ "Achat",
RPW < -80 ~ "Vente",
is.na(RPW) ~ NA_character_,
TRUE ~ "Conserver"
)
)
}
# Apply the function to calculate RPW and Decision using the default period of 14 days
dt_price_with_rpw_decision <- calculate_rpw_decision(dt_price)
# Function to calculate RPW and Decision
calculate_rpw_decision <- function(dt, period = 14) {
dt %>%
arrange(Date) %>%
mutate(
RPW = (rollmax(High, period, align = "right", fill = NA) - Close) /
(rollmax(High, period, align = "right", fill = NA) - rollapply(Low, period, min, align = "right", fill = NA)) * -100,
Decision = case_when(
RPW > -20 ~ "Achat",
RPW < -80 ~ "Vente",
is.na(RPW) ~ NA_character_,
TRUE ~ "Conserver"
),
Decision_1 = case_when(
is.na(lag(RPW)) & is.na(RPW) ~ NA_character_,
lag(RPW) < -50 & RPW > -50 ~ "Achat",
lag(RPW) > -50 & RPW < -50 ~ "Vente",
TRUE ~ "Conserver"
)
)
}
# Appliquer la fonction pour calculer RPW, Decision et Decision_1 en triant par ordre chronologique
dt_price_with_decisions <- calculate_rpw_decision(dt_price)
View(dt_price_with_decisions)
### Décision 3 par MACD
library(TTR)
# Fonction pour calculer les signaux d'achat, de vente ou de conserver basés sur les divergences MACD
calculate_macd_signals <- function(dt) {
dt %>%
mutate(
# Calculer l'indicateur MACD
MACD = MACD(Cl(dt), nFast = 12, nSlow = 26, nSig = 9),
# Identifier les divergences
Divergence = ifelse(Hi(dt) < Hi(dt)[2] & MACD < MACD[2], "Bullish Divergence",
ifelse(Lo(dt) > Lo(dt)[2] & MACD > MACD[2], "Bearish Divergence", NA_character_))
) %>%
# Générer les signaux d'achat, de vente ou de conserver en fonction des divergences
mutate(
Decision_MACD = case_when(
Divergence == "Bullish Divergence" ~ "Achat",
Divergence == "Bearish Divergence" ~ "Vente",
TRUE ~ "Conserver"
)
)
}
# Appliquer la fonction pour calculer RPW, Decision, Decision_1 et Decision_MACD en triant par ordre chronologique
dt_price_with_signals <- dt %>%
arrange(Date) %>%
calculate_macd_signals() %>%
mutate(
RPW = (rollmax(High, period, align = "right", fill = NA) - Close) /
(rollmax(High, period, align = "right", fill = NA) - rollapply(Low, period, min, align = "right", fill = NA)) * -100,
Decision = case_when(
RPW > -20 ~ "Achat",
RPW < -80 ~ "Vente",
is.na(RPW) ~ NA_character_,
TRUE ~ "Conserver"
),
Decision_1 = case_when(
is.na(lag(RPW)) & is.na(RPW) ~ NA_character_,
lag(RPW) < -50 & RPW > -50 ~ "Achat",
lag(RPW) > -50 & RPW < -50 ~ "Vente",
TRUE ~ "Conserver"
)
)
# Fonction pour calculer les signaux d'achat, de vente ou de conserver basés sur les divergences MACD
calculate_macd_signals <- function(dt) {
dt %>%
mutate(
# Calculer l'indicateur MACD
MACD = MACD(Cl(dt), nFast = 12, nSlow = 26, nSig = 9),
# Identifier les divergences
Divergence = ifelse(Hi(dt) < Hi(dt)[2] & MACD < MACD[2], "Bullish Divergence",
ifelse(Lo(dt) > Lo(dt)[2] & MACD > MACD[2], "Bearish Divergence", NA_character_))
) %>%
# Générer les signaux d'achat, de vente ou de conserver en fonction des divergences
mutate(
Decision_MACD = case_when(
Divergence == "Bullish Divergence" ~ "Achat",
Divergence == "Bearish Divergence" ~ "Vente",
TRUE ~ "Conserver"
)
)
}
# Fonction pour calculer les signaux d'achat, de vente ou de conserver basés sur les divergences MACD
calculate_macd_signals <- function(dt) {
dt %>%
mutate(
# Calculer l'indicateur MACD
MACD = MACD(Cl(dt), nFast = 12, nSlow = 26, nSig = 9),
# Identifier les divergences
Divergence = ifelse(Hi(dt) < Hi(dt)[2] & MACD < MACD[2], "Bullish Divergence",
ifelse(Lo(dt) > Lo(dt)[2] & MACD > MACD[2], "Bearish Divergence", NA_character_))
) %>%
# Générer les signaux d'achat, de vente ou de conserver en fonction des divergences
mutate(
Decision_MACD = case_when(
Divergence == "Bullish Divergence" ~ "Achat",
Divergence == "Bearish Divergence" ~ "Vente",
TRUE ~ "Conserver"
)
)
}
# Appliquer la fonction pour calculer les signaux MACD
dt_with_macd_signals <- calculate_macd_signals(dt_price)
library(TTR)
# Fonction pour calculer les signaux d'achat, de vente ou de conserver basés sur les divergences MACD
calculate_macd_signals <- function(dt) {
dt %>%
mutate(
# Récupérer les valeurs High, Low, et Close
hlc <- HLC(dt),
# Calculer l'indicateur MACD
MACD = MACD(hlc$Close, nFast = 12, nSlow = 26, nSig = 9),
# Identifier les divergences
Divergence = ifelse(hlc$High < lag(hlc$High) & MACD < lag(MACD), "Bullish Divergence",
ifelse(hlc$Low > lag(hlc$Low) & MACD > lag(MACD), "Bearish Divergence", NA_character_))
) %>%
# Générer les signaux d'achat, de vente ou de conserver en fonction des divergences
mutate(
Decision_MACD = case_when(
Divergence == "Bullish Divergence" ~ "Achat",
Divergence == "Bearish Divergence" ~ "Vente",
TRUE ~ "Conserver"
)
)
}
# Appliquer la fonction pour calculer les signaux MACD
dt_with_macd_signals <- calculate_macd_signals(dt_price)
head(HLC(dt_price))
calculate_macd_signals <- function(dt) {
dt %>%
mutate(
# Calculer l'indicateur MACD
MACD = MACD(Cl(dt), nFast = 12, nSlow = 26, nSig = 9),
# Identifier les divergences
Divergence = ifelse(Hi(dt) < Hi(dt)[2] & MACD < MACD[2], "Bullish Divergence",
ifelse(Lo(dt) > Lo(dt)[2] & MACD > MACD[2], "Bearish Divergence", NA_character_))
) %>%
# Générer les signaux d'achat, de vente ou de conserver en fonction des divergences
mutate(
Decision_MACD = case_when(
Divergence == "Bullish Divergence" ~ "Achat",
Divergence == "Bearish Divergence" ~ "Vente",
TRUE ~ "Conserver"
)
)
}
dt_price_with_macd_signals <- calculate_macd_signals(dt_price)
MACD_ <- MACD(Cl(dt_price),nFast=12,nSlow=26,nSig=9)
View(MACD_)
# Fonction pour calculer les signaux d'achat, de vente ou de conserver basés sur les divergences MACD
calculate_macd_signals <- function(dt) {
dt %>%
mutate(
# Calculer l'indicateur MACD
MACD = MACD(dt$Close, nFast = 12, nSlow = 26, nSig = 9),
# Identifier les divergences
Divergence = ifelse(hlc$High < lag(hlc$High) & MACD < lag(MACD), "Bullish Divergence",
ifelse(hlc$Low > lag(hlc$Low) & MACD > lag(MACD), "Bearish Divergence", NA_character_))
) %>%
# Générer les signaux d'achat, de vente ou de conserver en fonction des divergences
mutate(
Decision_MACD = case_when(
Divergence == "Bullish Divergence" ~ "Achat",
Divergence == "Bearish Divergence" ~ "Vente",
TRUE ~ "Conserver"
)
)
}
# Appliquer la fonction pour calculer les signaux MACD
dt_with_macd_signals <- calculate_macd_signals(dt_price)
# Fonction pour calculer les signaux d'achat, de vente ou de conserver basés sur les divergences MACD
calculate_macd_signals <- function(dt) {
dt %>%
mutate(
# Calculer l'indicateur MACD
MACD = MACD(dt$Close, nFast = 12, nSlow = 26, nSig = 9),
# Identifier les divergences
Divergence = ifelse(dt$High < lag(dt$High) & MACD < lag(MACD), "Bullish Divergence",
ifelse(dt$Low > lag(dt$Low) & MACD > lag(MACD), "Bearish Divergence", NA_character_))
) %>%
# Générer les signaux d'achat, de vente ou de conserver en fonction des divergences
mutate(
Decision_MACD = case_when(
Divergence == "Bullish Divergence" ~ "Achat",
Divergence == "Bearish Divergence" ~ "Vente",
TRUE ~ "Conserver"
)
)
}
# Fonction pour calculer les signaux d'achat, de vente ou de conserver basés sur les divergences MACD
calculate_macd_signals <- function(dt) {
dt %>%
mutate(
# Calculer l'indicateur MACD
MACD = MACD(dt$Close, nFast = 12, nSlow = 26, nSig = 9),
# Identifier les divergences
Divergence = ifelse(dt$High < lag(dt$High) & MACD < lag(MACD), "Bullish Divergence",
ifelse(dt$Low > lag(dt$Low) & MACD > lag(MACD), "Bearish Divergence", NA_character_))
) %>%
# Générer les signaux d'achat, de vente ou de conserver en fonction des divergences
mutate(
Decision_MACD = case_when(
Divergence == "Bullish Divergence" ~ "Achat",
Divergence == "Bearish Divergence" ~ "Vente",
TRUE ~ "Conserver"
)
)
}
# Appliquer la fonction pour calculer les signaux MACD
dt_with_macd_signals <- calculate_macd_signals(dt_price)
# Fonction pour calculer les signaux d'achat, de vente ou de conserver basés sur les divergences MACD
calculate_macd_signals <- function(dt) {
dt %>%
mutate(
# Calculer l'indicateur MACD
MACD = MACD(Cl(dt), nFast = 12, nSlow = 26, nSig = 9),
# Identifier les divergences
Divergence = ifelse(Hi(dt) < Hi(dt)[2] & MACD < MACD[2], "Bullish Divergence",
ifelse(Lo(dt) > Lo(dt)[2] & MACD > MACD[2], "Bearish Divergence", NA_character_))
) %>%
# Générer les signaux d'achat, de vente ou de conserver en fonction des divergences
mutate(
Decision_MACD = case_when(
Divergence == "Bullish Divergence" ~ "Achat",
Divergence == "Bearish Divergence" ~ "Vente",
TRUE ~ "Conserver"
)
)
}
# Appliquer la fonction pour calculer les signaux MACD
dt_with_macd_signals <- calculate_macd_signals(dt_price)
# Fonction pour calculer les signaux d'achat, de vente ou de conserver basés sur les divergences MACD
calculate_macd_signals <- function(dt) {
dt %>%
mutate(
# Calculer l'indicateur MACD
MACD = MACD(Cl(dt), nFast = 12, nSlow = 26, nSig = 9),
# Identifier les divergences
Divergence = ifelse(Hi(dt) < Hi(dt)[2] & MACD < MACD[2], "Bullish Divergence",
ifelse(Lo(dt) > Lo(dt)[2] & MACD > MACD[2], "Bearish Divergence", NA_character_))
) %>%
# Générer les signaux d'achat, de vente ou de conserver en fonction des divergences
mutate(
Decision_MACD = case_when(
Divergence == "Bullish Divergence" ~ "Achat",
Divergence == "Bearish Divergence" ~ "Vente",
is.na(Divergence) ~ "Conserver"
)
)
}
# Appliquer la fonction pour calculer les signaux MACD
dt_with_macd_signals <- calculate_macd_signals(dt_price)
# Fonction pour calculer les signaux d'achat, de vente ou de conserver basés sur les divergences MACD
calculate_macd_signals <- function(dt) {
dt %>%
mutate(
# Calculer les variations de prix
Price_Change = Delt(Close),
# Calculer l'indicateur MACD
MACD = MACD(Cl(dt), nFast = 12, nSlow = 26, nSig = 9),
# Identifier les divergences
Divergence = ifelse(Hi(dt) < Hi(lag(dt)) & MACD > lag(MACD), "Bullish Divergence",
ifelse(Lo(dt) > Lo(lag(dt)) & MACD < lag(MACD), "Bearish Divergence", NA_character_))
) %>%
# Générer les signaux d'achat, de vente ou de conserver en fonction des divergences
mutate(
Decision_MACD = case_when(
Divergence == "Bullish Divergence" ~ "Achat",
Divergence == "Bearish Divergence" ~ "Vente",
is.na(Divergence) ~ "Conserver"
)
)
}
# Appliquer la fonction pour calculer les signaux MACD
dt_with_macd_signals <- calculate_macd_signals(dt_price)
# Fonction pour calculer les signaux d'achat, de vente ou de conserver basés sur les divergences MACD
calculate_macd_signals <- function(dt) {
dt %>%
mutate(
# Calculer les variations de prix
Price_Change = c(NA, diff(Close)),
# Calculer l'indicateur MACD
MACD = MACD(Cl(dt), nFast = 12, nSlow = 26, nSig = 9),
# Identifier les divergences
Divergence = ifelse(Hi(dt) < Hi(lag(dt)) & Price_Change > 0 & MACD > lag(MACD), "Bullish Divergence",
ifelse(Lo(dt) > Lo(lag(dt)) & Price_Change < 0 & MACD < lag(MACD), "Bearish Divergence", NA_character_))
) %>%
# Générer les signaux d'achat, de vente ou de conserver en fonction des divergences
mutate(
Decision_MACD = case_when(
Divergence == "Bullish Divergence" ~ "Achat",
Divergence == "Bearish Divergence" ~ "Vente",
is.na(Divergence) ~ "Conserver"
)
)
}
# Appliquer la fonction pour calculer les signaux MACD
dt_with_macd_signals <- calculate_macd_signals(dt_price)
library(readxl)
dt_price <- read_excel("C:/Users/koffi/Downloads/Data_Kamel.xlsx")
dt_price <- dt_price[, c(1:5)]
colnames(dt_price) <- c("Date", "Close", "Open", "High", "Low")
dt_price <- dt_price[, c(1,3:5,2)]
# Fonction pour calculer les signaux d'achat, de vente ou de conserver basés sur les divergences MACD
calculate_macd_signals <- function(dt) {
dt %>%
mutate(
# Calculer les variations de prix
Price_Change = c(NA, diff(Close)),
# Calculer l'indicateur MACD
MACD = MACD(Cl(dt), nFast = 12, nSlow = 26, nSig = 9),
# Identifier les divergences
Divergence = ifelse(Hi(dt) < Hi(lag(dt)) & Price_Change > 0 & MACD > lag(MACD), "Bullish Divergence",
ifelse(Lo(dt) > Lo(lag(dt)) & Price_Change < 0 & MACD < lag(MACD), "Bearish Divergence", NA_character_))
) %>%
# Générer les signaux d'achat, de vente ou de conserver en fonction des divergences
mutate(
Decision_MACD = case_when(
Divergence == "Bullish Divergence" ~ "Achat",
Divergence == "Bearish Divergence" ~ "Vente",
is.na(Divergence) ~ "Conserver"
)
)
}
# Appliquer la fonction pour calculer les signaux MACD
dt_with_macd_signals <- calculate_macd_signals(dt_price)
# Fonction pour calculer les signaux d'achat, de vente ou de conserver basés sur les divergences MACD
calculate_macd_signals <- function(dt) {
dt %>%
mutate(
# Initialiser Price_Change avec NA à la première ligne
Price_Change = c(NA, diff(Close)),
# Calculer l'indicateur MACD
MACD = MACD(Cl(dt), nFast = 12, nSlow = 26, nSig = 9),
# Identifier les divergences
Divergence = ifelse(Hi(dt) < Hi(lag(dt)) & Price_Change < 0 & MACD > lag(MACD), "Bullish Divergence",
ifelse(Lo(dt) > Lo(lag(dt)) & Price_Change > 0 & MACD < lag(MACD), "Bearish Divergence", NA_character_))
) %>%
# Générer les signaux d'achat, de vente ou de conserver en fonction des divergences
mutate(
Decision_MACD = case_when(
Divergence == "Bullish Divergence" ~ "Achat",
Divergence == "Bearish Divergence" ~ "Vente",
is.na(Divergence) ~ "Conserver"
)
)
}
# Appliquer la fonction pour calculer les signaux MACD
dt_with_macd_signals <- calculate_macd_signals(dt_price)
rlang::last_trace()
rm(calculate_macd_signals)
# Fonction pour calculer les signaux d'achat, de vente ou de conserver basés sur les divergences MACD
calculate_macd_signals <- function(dt) {
dt %>%
mutate(
# Initialiser Price_Change avec NA à la première ligne
Price_Change = c(NA, diff(Close)),
# Calculer l'indicateur MACD
MACD = MACD(Cl(dt), nFast = 12, nSlow = 26, nSig = 9),
# Identifier les divergences
Divergence = ifelse(dt$High < lag(dt$High) & Price_Change < 0 & MACD > lag(MACD), "Bullish Divergence",
ifelse(dt$Low > lag(dt$Low) & Price_Change > 0 & MACD < lag(MACD), "Bearish Divergence", NA_character_))
) %>%
# Générer les signaux d'achat, de vente ou de conserver en fonction des divergences
mutate(
Decision_MACD = case_when(
Divergence == "Bullish Divergence" ~ "Achat",
Divergence == "Bearish Divergence" ~ "Vente",
is.na(Divergence) ~ "Conserver"
)
)
}
# Appliquer la fonction pour calculer les signaux MACD
dt_with_macd_signals <- calculate_macd_signals(dt_price)
# Fonction pour calculer les signaux d'achat, de vente ou de conserver basés sur les divergences MACD
calculate_macd_signals <- function(dt) {
dt %>%
mutate(
# Initialiser Price_Change avec NA à la première ligne
Price_Change = c(NA, diff(Close)),
# Calculer l'indicateur MACD
MACD = MACD(Cl(dt), nFast = 12, nSlow = 26, nSig = 9),
# Identifier les divergences
Divergence = ifelse(dt$High < lag(dt$High) & Price_Change < 0 & MACD > lag(MACD), "Bullish Divergence",
ifelse(dt$Low > lag(dt$Low) & Price_Change > 0 & MACD < lag(MACD), "Bearish Divergence", NA_character_))
) %>%
# Générer les signaux d'achat, de vente ou de conserver en fonction des divergences
mutate(
Decision_MACD = case_when(
Divergence == "Bullish Divergence" ~ "Achat",
Divergence == "Bearish Divergence" ~ "Vente",
TRUE ~ "Conserver"
)
)
}
# Fonction pour calculer les signaux d'achat, de vente ou de conserver basés sur les divergences MACD
calculate_macd_signals <- function(dt) {
dt %>%
mutate(
# Initialiser Price_Change avec NA à la première ligne
Price_Change = c(NA, diff(Close)),
# Calculer l'indicateur MACD
MACD = MACD(Cl(dt), nFast = 12, nSlow = 26, nSig = 9),
# Identifier les divergences
Divergence = ifelse(dt$High < lag(dt$High) & Price_Change < 0 & MACD > lag(MACD), "Bullish Divergence",
ifelse(dt$Low > lag(dt$Low) & Price_Change > 0 & MACD < lag(MACD), "Bearish Divergence", NA_character_))
) %>%
# Générer les signaux d'achat, de vente ou de conserver en fonction des divergences
mutate(
Decision_MACD = case_when(
Divergence == "Bullish Divergence" ~ "Achat",
Divergence == "Bearish Divergence" ~ "Vente",
TRUE ~ "Conserver"
)
)
}
# Appliquer la fonction pour calculer les signaux MACD
dt_with_macd_signals <- calculate_macd_signals(dt_price)
library(rvest)
library(dplyr)
quotes_tbl <- rvest::read_html("https://www.brvm.org/en/cours-actions/0/status/200") %>%
rvest::html_nodes('table') %>%
rvest::html_table()
quotes_tbl <- quotes_tbl[[4]]
quotes_tbl$`Change (%)`<-gsub(",", ".", quotes_tbl$`Change (%)`)
quotes_tbl$`Change (%)`<-as.numeric(quotes_tbl$`Change (%)`)
quotes_tbl$Volume<-gsub(" ", "", quotes_tbl$Volume)
quotes_tbl$Volume<-as.numeric(quotes_tbl$Volume)
quotes_tbl$`Previous price`<-gsub(" ", "", quotes_tbl$`Previous price`)
quotes_tbl$`Previous price`<-as.numeric(quotes_tbl$`Previous price`)
quotes_tbl$`Opening price`<-gsub(" ", "", quotes_tbl$`Opening price`)
quotes_tbl$`Opening price`<-as.numeric(quotes_tbl$`Opening price`)
quotes_tbl$`Closing price`<-gsub(" ", "", quotes_tbl$`Closing price`)
quotes_tbl$`Closing price`<-as.numeric(quotes_tbl$`Closing price`)
colnames(quotes_tbl)<-c(
"ticker",
"company_name",
"volume",
"previous_price",
"open",
"close",
"percent_change")
quotes_tbl$rank <- rank(-quotes_tbl$`percent_change`)
quotes_tbl[order(-quotes_tbl$`percent_change`),]
save.image()
