rlang::last_error()
View(new_saved)
Daily_brvm_info = as.data.frame(matrix(NA, ncol = 11, nrow = 0))
names(Daily_brvm_info) = c("Date", "Ticker",
"Description", "Open",
"High", "Low",
"Close", "Volume",
"Number of trade", "Market capitalization",
"Oustanding shares")
all_tickers = unique(dailyprices_info$Ticker)[-46]
for (tick in all_tickers) {
data_saved = dailyprices_info%>%
filter(Ticker == tick)
all_years = unique(year(data_saved$Date))[-11]
for (the_year in all_years){
new_saved = data_saved%>%
filter(year(Date) == the_year)
the_cap = final_capi%>%
filter(Ticker == tick)%>%
filter(year(Date) == the_year)
new_saved$`Market capitalization` = NA
new_saved$`Oustanding shares` = NA
new_saved$`Market capitalization` = the_cap$`Market capitalization`
new_saved$`Oustanding shares` = the_cap$`Oustanding shares`
Daily_brvm_info = rbind(Daily_brvm_info,new_saved)
}
}
rlang::last_error()
View(new_saved)
View(the_cap)
nrow(the_cap)
nrow(the_cap) ==0
nrow(the_cap) !=0
Daily_brvm_info = as.data.frame(matrix(NA, ncol = 11, nrow = 0))
names(Daily_brvm_info) = c("Date", "Ticker",
"Description", "Open",
"High", "Low",
"Close", "Volume",
"Number of trade", "Market capitalization",
"Oustanding shares")
### Nous enlever le titre ORAC coté dès le 30 Décembre 2022
all_tickers = unique(dailyprices_info$Ticker)[-46]
for (tick in all_tickers) {
data_saved = dailyprices_info%>%
filter(Ticker == tick)
# L'année 2023 ne sera pas pris en compte
all_years = unique(year(data_saved$Date))[-11]
for (the_year in all_years){
new_saved = data_saved%>%
filter(year(Date) == the_year)
the_cap = final_capi%>%
filter(Ticker == tick)%>%
filter(year(Date) == the_year)
new_saved$`Market capitalization` = NA
new_saved$`Oustanding shares` = NA
if (nrow(the_cap) !=0 ) {
new_saved$`Market capitalization` = the_cap$`Market capitalization`
new_saved$`Oustanding shares` = the_cap$`Oustanding shares`
Daily_brvm_info = rbind(Daily_brvm_info,new_saved)
}
}
}
View(Daily_brvm_info)
dim(Daily_brvm_info)
dim(Daily_brvm_info)/46
View(final_capi)
year("2022-01-01")
year("2022-12-31")
str_sub(capi, 16,19)
as.numeric(str_sub(capi, 16,19))
as.numeric(str_sub(capi, 16,19)) + 1
ymd(paste0((as.numeric(str_sub(capi, 16,19)) + 1), "-01-01"))
capi_data_2023 = capi_data
View(capi_data_2023)
capi_data_2023$Date = ymd(paste0((as.numeric(str_sub(capi, 16,19)) + 1), "-01-01"))
View(final_capi)
final_capi <- rbind(final_capi, capi_data_2023)
View(final_capi)
Daily_brvm_info = as.data.frame(matrix(NA, ncol = 11, nrow = 0))
names(Daily_brvm_info) = c("Date", "Ticker",
"Description", "Open",
"High", "Low",
"Close", "Volume",
"Number of trade", "Market capitalization",
"Oustanding shares")
### Nous avons enlevé le titre ORAC coté depuis le 30 Décembre 2022
# all_tickers = unique(dailyprices_info$Ticker)[-46]
all_tickers = unique(dailyprices_info$Ticker)
for (tick in all_tickers) {
data_saved = dailyprices_info%>%
filter(Ticker == tick)
# L'année 2023 ne sera pas pris en compte
all_years = unique(year(data_saved$Date))[-11]
all_years = unique(year(data_saved$Date))
for (the_year in all_years){
new_saved = data_saved%>%
filter(year(Date) == the_year)
the_cap = final_capi%>%
filter(Ticker == tick)%>%
filter(year(Date) == the_year)
new_saved$`Market capitalization` = NA
new_saved$`Oustanding shares` = NA
if (nrow(the_cap) !=0 ) {
new_saved$`Market capitalization` = the_cap$`Market capitalization`
new_saved$`Oustanding shares` = the_cap$`Oustanding shares`
Daily_brvm_info = rbind(Daily_brvm_info,new_saved)
}
}
}
getwd()
install.packages(c("data.table", "dplyr", "dtplyr", "fBasics", "flextable", "forecast", "ggplot2", "glmnet", "gtable", "Hmisc", "ichimoku", "igraph", "keras", "lubridate", "psych", "quantmod", "rlang", "rmarkdown", "vtable", "xfun", "XML", "xts"))
library(ichimoku)
head(df_merge(Open_Brvm, High_Brvm,Close_Brvm, Low_Brvm,Volume_Brvm, `Number of trade_Brvm`))
head(na.omit(df_merge(Open_Brvm, High_Brvm,Close_Brvm, Low_Brvm,Volume_Brvm, `Number of trade_Brvm`)))
dim(na.omit(df_merge(Open_Brvm, High_Brvm,Close_Brvm, Low_Brvm,Volume_Brvm, `Number of trade_Brvm`)))
TKR <- sample_ohlc_data
ichimoku(TKR)
iplot(ichimoku(TKR))
iplot(ichimoku(TKR))
library(shiny)
library(knitr)
library(waiter)
library(ftExtra)
library(moments)
library(GGally)
library(echarts4r)
library(prophet)
library(fBasics)
library(nortest)
library(urca)
library(shinydashboard)
library(plotly)
library(ggplot2)
library(shinyWidgets)
library(shinythemes)
library(datasets)
library(xts)
library(fontawesome)
library(quantmod)
library(gsheet)
library(httr)
library(stringr)
library(dplyr)
library(stringi)
library(V8)
library(tidyr)
library(rvest)
library(formattable)
library(data.table)
library(kableExtra)
library(rlang)
library(lubridate)
library(purrr)
library(DT)
library(highcharter)
library(tidyverse)
library(tseries)
library(timeSeries)
library(forecast)
library(highr)
library(httr2)
library(bslib)
library(thematic)
library(magrittr)
library(colourpicker)
library(psych)
library(vtable)
library(RCurl)
library(XML)
library(shinydashboardPlus)
library(xml2)
library(viridis)
library(treemap)
library(rugarch)
library(rmgarch)
library(shinycssloaders)
library(ichimoku)
library(PerformanceAnalytics)
library(shinycustomloader)
library(shinyjs)
library(usethis)
library(rhub)
library(htmlwidgets)
library(BRVM)
library(patchwork)
library(hrbrthemes)
library(ggthemes)
library(tinytex)
getwd()
install.packages("amsmath")
BRVM_plot<- function(.company,
from = Sys.Date() - 365,
to = Sys.Date() - 1,
up.col = "darkgreen",
down.col = "red") {
#  print('It possible to plot each sector chart line. You can use as argument .sectors$Agriculture to plot. Example BRVM_plot(.sector$Agriculture)')
date1<- from
date2 = to
# Evaluate input parameters ----
.company <- unique(toupper(.company))
# companies <- c( "ABJC", "BICC", "BNBC", "BOAB", "BOABF", "BOAC", "BOAM", "BOAN", "BOAS", "CABC", "CBIBF", "CFAC", "CIEC", "ECOC", "ETIT", "FTSC", "NEIC", "NSBC", "NTLC", "ONTBF", "ORGT", "PALC", "PRSC", "SAFC", "SCRC", "SDCC", "SDSC", "SEMC", "SGBC", "SHEC", "SIBC", "SICC", "SIVC", "SLBC", "SMBC", "SNTS", "SOGC", "SPHC", "STAC", "STBC", "SVOC", "TTLC", "TTLS", "UNLC", "UNXC"
#               #, "TTRC"
# )
# ifelse(.company == "ALL",
#        .company<- companies,
#        .company)
Global.returns<- BRVM_get(.symbol = .company, .from = date1, .to = date2 )
if (length(Global.returns)== 6){
ticker.name <- .company
Global.returns1 <- Global.returns
Global.returns <-as.xts(Global.returns[,-c(1)],
order.by=Global.returns$Date)
Global.returns1$direction<-NA
for (i in 2:nrow(Global.returns1)) {
i1<- i-1
ifelse (Global.returns1[i,6] >= Global.returns1[i1,6],
Global.returns1[i, "direction"] <- "up",
Global.returns1[i, "direction"] <- "down")
}
brvm.plot<-     highchart (type="stock") %>%
hc_title(text = paste0(ticker.name," chart : from ", date1, " to ", date2),
style = list(fontWeight = "bold", fontSize = "25px"),
align = "center") %>%
hc_add_series (name = "Prices",
Global.returns,
yAxis = 0,
showInLegend = FALSE,
upColor= up.col,
color = down.col) %>%
hc_add_yAxis (nid = 1L,
relative = 1)%>%
hc_add_series (name = "Volume",
data = Global.returns1[, c(1,6,7)],
yAxis = 1,
showInLegend= FALSE,
type="column",
hcaes(x = Date,
y = Volume,
group = direction ))%>%
hc_add_yAxis (nid = 2L,
relative = 1) %>%
hc_yAxis_multiples(
list(title = list(
style=list(color='#333333',
fontSize = "20px",
fontFamily= "Erica One"),
text = "Price"), top = "-10%", height = "90%", opposite = FALSE),
list(title = list(
style=list(color='gray',
fontSize = "20px",
fontFamily= "Erica One"),
text = "Volume"), top = "80%", height = "20%")
)%>%
hc_colors(colors = c(down.col, up.col))%>%
hc_exporting(
enabled = TRUE, # always enabled,
filename = paste0(ticker.name," chart : from ", date1, " to ", date2))
}
else if (length(Global.returns) > 6) {
brvm.plot<- highchart(type = "stock") %>%
hc_add_series(data = Global.returns,
type = "line",
hcaes(x =Date, y= Close, group= Ticker))%>%
hc_xAxis(title = list(text = ""))%>%
hc_title(text = paste0("Tickers (", paste0(symb, collapse = ", "), ") line chart from ", date1, " to ", date2)) %>%
hc_exporting(
enabled = TRUE, # always enabled,
filename = paste0("Tickers line chart from ", date1, " to ", date2)
)
}
return(brvm.plot)
}
BRVM_plot(c("BICC","ETIT", "BOAM"))
BRVM_plot<- function(.company,
from = Sys.Date() - 365,
to = Sys.Date() - 1,
up.col = "darkgreen",
down.col = "red") {
#  print('It possible to plot each sector chart line. You can use as argument .sectors$Agriculture to plot. Example BRVM_plot(.sector$Agriculture)')
date1<- from
date2 = to
# Evaluate input parameters ----
.company <- unique(toupper(.company))
# companies <- c( "ABJC", "BICC", "BNBC", "BOAB", "BOABF", "BOAC", "BOAM", "BOAN", "BOAS", "CABC", "CBIBF", "CFAC", "CIEC", "ECOC", "ETIT", "FTSC", "NEIC", "NSBC", "NTLC", "ONTBF", "ORGT", "PALC", "PRSC", "SAFC", "SCRC", "SDCC", "SDSC", "SEMC", "SGBC", "SHEC", "SIBC", "SICC", "SIVC", "SLBC", "SMBC", "SNTS", "SOGC", "SPHC", "STAC", "STBC", "SVOC", "TTLC", "TTLS", "UNLC", "UNXC"
#               #, "TTRC"
# )
# ifelse(.company == "ALL",
#        .company<- companies,
#        .company)
Global.returns<- BRVM_get(.symbol = .company, .from = date1, .to = date2 )
if (length(Global.returns)== 6){
ticker.name <- .company
Global.returns1 <- Global.returns
Global.returns <-as.xts(Global.returns[,-c(1)],
order.by=Global.returns$Date)
Global.returns1$direction<-NA
for (i in 2:nrow(Global.returns1)) {
i1<- i-1
ifelse (Global.returns1[i,6] >= Global.returns1[i1,6],
Global.returns1[i, "direction"] <- "up",
Global.returns1[i, "direction"] <- "down")
}
brvm.plot<-     highchart (type="stock") %>%
hc_title(text = paste0(ticker.name," chart : from ", date1, " to ", date2),
style = list(fontWeight = "bold", fontSize = "25px"),
align = "center") %>%
hc_add_series (name = "Prices",
Global.returns,
yAxis = 0,
showInLegend = FALSE,
upColor= up.col,
color = down.col) %>%
hc_add_yAxis (nid = 1L,
relative = 1)%>%
hc_add_series (name = "Volume",
data = Global.returns1[, c(1,6,7)],
yAxis = 1,
showInLegend= FALSE,
type="column",
hcaes(x = Date,
y = Volume,
group = direction ))%>%
hc_add_yAxis (nid = 2L,
relative = 1) %>%
hc_yAxis_multiples(
list(title = list(
style=list(color='#333333',
fontSize = "20px",
fontFamily= "Erica One"),
text = "Price"), top = "-10%", height = "90%", opposite = FALSE),
list(title = list(
style=list(color='gray',
fontSize = "20px",
fontFamily= "Erica One"),
text = "Volume"), top = "80%", height = "20%")
)%>%
hc_colors(colors = c(down.col, up.col))%>%
hc_exporting(
enabled = TRUE, # always enabled,
filename = paste0(ticker.name," chart : from ", date1, " to ", date2))
}
else if (length(Global.returns) > 6) {
brvm.plot<- highchart(type = "stock") %>%
hc_add_series(data = Global.returns,
type = "line",
hcaes(x =Date, y= Close, group= Ticker))%>%
hc_xAxis(title = list(text = ""))%>%
hc_title(text = paste0("Tickers (", paste0(.company, collapse = ", "), ") line chart from ", date1, " to ", date2)) %>%
hc_exporting(
enabled = TRUE, # always enabled,
filename = paste0("Tickers line chart from ", date1, " to ", date2)
)
}
return(brvm.plot)
}
BRVM_plot(c("BICC","ETIT", "BOAM"))
BRVM_plot(c("BICC","ETIT", "BOAM"))
BRVM_plot(c("BICC","ETIT", "BOAM"))
library(shiny)
library(waiter)
library(ftExtra)
library(moments)
library(GGally)
library(echarts4r)
library(prophet)
library(fBasics)
library(nortest)
library(urca)
library(shinydashboard)
library(plotly)
library(ggplot2)
library(shinyWidgets)
library(shinythemes)
library(datasets)
library(xts)
library(fontawesome)
library(quantmod)
library(gsheet)
library(httr)
library(stringr)
library(dplyr)
library(stringi)
library(V8)
library(tidyr)
library(rvest)
library(formattable)
library(data.table)
library(kableExtra)
library(rlang)
library(lubridate)
library(purrr)
library(DT)
library(highcharter)
library(tidyverse)
library(tseries)
library(timeSeries)
library(forecast)
library(highr)
library(httr2)
library(bslib)
library(thematic)
library(magrittr)
library(colourpicker)
library(psych)
library(vtable)
library(RCurl)
library(XML)
library(shinydashboardPlus)
library(xml2)
library(viridis)
library(treemap)
library(rugarch)
library(rmgarch)
library(shinycssloaders)
library(ichimoku)
library(PerformanceAnalytics)
library(shinycustomloader)
library(shinyjs)
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
BRVM_ticker_desc()
quotes = BRVM_ticker_desc()
names(quotes)
dput(names(quotes))
names(quotes) = c("Symbole", "Company name", "Sector", "Country")
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
runApp('C:/Users/koffi/Downloads/BRVM navbarpage.R')
BRVM_plot<- function(.company,
from = Sys.Date() - 365,
to = Sys.Date() - 1,
up.col = "darkgreen",
down.col = "red") {
#  print('It possible to plot each sector chart line. You can use as argument .sectors$Agriculture to plot. Example BRVM_plot(.sector$Agriculture)')
date1<- from
date2 = to
# Evaluate input parameters ----
.company <- unique(toupper(.company))
# companies <- c( "ABJC", "BICC", "BNBC", "BOAB", "BOABF", "BOAC", "BOAM", "BOAN", "BOAS", "CABC", "CBIBF", "CFAC", "CIEC", "ECOC", "ETIT", "FTSC", "NEIC", "NSBC", "NTLC", "ONTBF", "ORGT", "PALC", "PRSC", "SAFC", "SCRC", "SDCC", "SDSC", "SEMC", "SGBC", "SHEC", "SIBC", "SICC", "SIVC", "SLBC", "SMBC", "SNTS", "SOGC", "SPHC", "STAC", "STBC", "SVOC", "TTLC", "TTLS", "UNLC", "UNXC"
#               #, "TTRC"
# )
# ifelse(.company == "ALL",
#        .company<- companies,
#        .company)
Global.returns<- BRVM_get(.symbol = .company, .from = date1, .to = date2 )
if (length(Global.returns)== 6){
ticker.name <- .company
Global.returns1 <- Global.returns
Global.returns <-as.xts(Global.returns[,-c(1)],
order.by=Global.returns$Date)
Global.returns1$direction<-NA
for (i in 2:nrow(Global.returns1)) {
i1<- i-1
ifelse (Global.returns1[i,6] >= Global.returns1[i1,6],
Global.returns1[i, "direction"] <- "up",
Global.returns1[i, "direction"] <- "down")
}
brvm.plot<-     highchart (type="stock") %>%
hc_title(text = paste0(ticker.name," chart : from ", date1, " to ", date2),
style = list(fontWeight = "bold", fontSize = "25px"),
align = "center") %>%
hc_add_series (name = "Prices",
Global.returns,
yAxis = 0,
showInLegend = FALSE,
upColor= up.col,
color = down.col) %>%
hc_add_yAxis (nid = 1L,
relative = 1)%>%
hc_add_series (name = "Volume",
data = Global.returns1[, c(1,6,7)],
yAxis = 1,
showInLegend= FALSE,
type="column",
hcaes(x = Date,
y = Volume,
group = direction ))%>%
hc_add_yAxis (nid = 2L,
relative = 1) %>%
hc_yAxis_multiples(
list(title = list(
style=list(color='#333333',
fontSize = "20px",
fontFamily= "Erica One"),
text = "Price"), top = "-10%", height = "90%", opposite = FALSE),
list(title = list(
style=list(color='gray',
fontSize = "20px",
fontFamily= "Erica One"),
text = "Volume"), top = "80%", height = "20%")
)%>%
hc_colors(colors = c(down.col, up.col))%>%
hc_exporting(
enabled = TRUE, # always enabled,
filename = paste0(ticker.name," chart : from ", date1, " to ", date2))
}
else if (length(Global.returns) > 6) {
brvm.plot<- highchart(type = "stock") %>%
hc_add_series(data = Global.returns,
type = "line",
hcaes(x =Date, y= Close, group= Ticker))%>%
hc_xAxis(title = list(text = ""))%>%
hc_title(text = paste0("Tickers (", paste0(.company, collapse = ", "), ") line chart from ", date1, " to ", date2)) %>%
hc_exporting(
enabled = TRUE, # always enabled,
filename = paste0("Tickers line chart from ", date1, " to ", date2)
)
}
return(brvm.plot)
}
BRVM_plot(c("BICC","ETIT", "BOAM"))
save.image()
