legend.text =c("Capitalisation boursière","Valeur totale transaction")
)+
scale_x_date(date_minor_breaks = "1 year", date_labels = "%Y")+
# Ajouter la deuxième échelle
scale_y_continuous(sec.axis = sec_axis(~./coeff, name = "Valeur totale transaction"))+
# theme_ipsum() +
# theme_bw()+
# theme(
#     axis.title.y = element_text(color = temperatureColor1, size=13),
#     axis.title.y.right = element_text(color = priceColor, size=13)
# )+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme_bw() +
theme_tq() +
scale_fill_tq() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(cap_liq, aes(x = Date))+
geom_line(aes(y = `Capitalisation boursière`), linetype = "solid", linewidth = 1.5, color=temperatureColor1) +
geom_line(aes(y = `Valeur Totale Transaction`*coeff), linetype = "solid", linewidth = 1.5, color=priceColor) +
# labs(x = "Date", y = "Val2", color = "Variables") +
theme(plot.title = element_text(hjust = 0.5, size = 15),
axis.text = element_text(size=15),
line = element_line(linewidth = 0.5),
axis.title = element_text(size = 15),
# legend.position = c(0.1, 0.85),
legend.text =c("Capitalisation boursière","Valeur totale transaction")
)+
scale_x_date(date_minor_breaks = "1 year", date_labels = "%Y")+
# Ajouter la deuxième échelle
scale_y_continuous(sec.axis = sec_axis(~./coeff, name = "Valeur totale transaction"))+
# theme_ipsum() +
# theme_bw()+
theme(
axis.title.y = element_text(color = temperatureColor1, size=13),
axis.title.y.right = element_text(color = priceColor, size=13)
)+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme_bw() +
theme_tq() +
scale_fill_tq() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(cap_liq, aes(x = Date))+
geom_line(aes(y = `Capitalisation boursière`), linetype = "solid", linewidth = 1.5, color=temperatureColor1) +
geom_line(aes(y = `Valeur Totale Transaction`*coeff), linetype = "solid", linewidth = 1.5, color=priceColor) +
# labs(x = "Date", y = "Val2", color = "Variables") +
theme(plot.title = element_text(hjust = 0.5, size = 15),
axis.text = element_text(size=15),
line = element_line(linewidth = 0.5),
axis.title = element_text(size = 15),
# legend.position = c(0.1, 0.85),
legend.text =c("Capitalisation boursière","Valeur totale transaction")
)+
scale_x_date(date_minor_breaks = "1 year", date_labels = "%Y")+
# Ajouter la deuxième échelle
scale_y_continuous(sec.axis = sec_axis(~./coeff, name = "Valeur totale transaction"))+
# theme_ipsum() +
# theme_bw()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme_bw() +
theme_tq() +
theme(
axis.title.y = element_text(color = temperatureColor1, size=13),
axis.title.y.right = element_text(color = priceColor, size=13)
)+
scale_fill_tq() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
BRVM_get1("BICC", Period = 30 )
BRVM_get1("BRVMPR", Period = 91 )
BRVM_get1("snts", Period = 91 )
Graph_of_liq(data= na.omit(subset(BRVM_Liq_measure, Ticker %in% .sectors$Other)))
Graph_of_liq(data= na.omit(subset(BRVM_Liq_measure, Ticker %in% .sectors$Agriculture)))
ggplot(cap_liq, aes(x = Date))+
geom_line(aes(y = `Capitalisation boursière`), linetype = "solid", linewidth = 1.5, color=temperatureColor1) +
geom_line(aes(y = `Valeur Totale Transaction`*coeff), linetype = "solid", linewidth = 1.5, color=priceColor) +
# labs(x = "Date", y = "Val2", color = "Variables") +
theme(plot.title = element_text(hjust = 0.5, size = 15),
axis.text = element_text(size=15),
line = element_line(linewidth = 0.5),
axis.title = element_text(size = 15),
# legend.position = c(0.1, 0.85),
legend.text =c("Capitalisation boursière","Valeur totale transaction")
)+
scale_x_date(date_minor_breaks = "1 year", date_labels = "%Y")+
# Ajouter la deuxième échelle
scale_y_continuous(sec.axis = sec_axis(~./coeff, name = "Valeur totale transaction"))+
# theme_ipsum() +
# theme_bw()+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
theme_bw() +
theme_tq() +
theme(
axis.title.y = element_text(color = temperatureColor1, size=13),
axis.title.y.right = element_text(color = priceColor, size=13)
)+
scale_fill_tq() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
max_vlmT = max(cap_liq$`Volume total transaction action`)
min_vlmT = min(cap_liq$`Volume total transaction action`)
max_Turnover = max(cap_liq$`Turnover`)
min_Turnover = min(cap_liq$`Turnover`)
coeff1 = max_vlmT/max_Turnover
coeff1
ggplot(cap_liq, aes(x = Date))+
geom_line(aes(y = `Volume total transaction action`), linetype = "solid", linewidth = 1.5, color=temperatureColor) +
geom_line(aes(y = `Turnover`*coeff1), linetype = "solid", linewidth = 1.5, color=priceColor) +
# labs(x = "Date", y = "Val2", color = "Variables") +
theme(plot.title = element_text(hjust = 0.5, size = 15),
axis.text = element_text(size=15),
line = element_line(linewidth = 0.5),
axis.title = element_text(size = 15),
legend.position = c(0.1, 0.85),
legend.text =c("Volume total transactions actions","Turnover")
)+
scale_x_date(date_minor_breaks = "1 year", date_labels = "%Y")+
# Ajouter la deuxième échelle
scale_y_continuous(sec.axis = sec_axis(~. /coeff1, name = "Turnover"))+
# theme_ipsum() +
theme_bw()+
theme(
axis.title.y = element_text(color = temperatureColor, size=13),
axis.title.y.right = element_text(color = priceColor, size=13)
)#+
fullInd
getwd()
brvm_Agriculture
brvm_allindex_dt
highchart() %>%
hc_xAxis(type = "datetime", dateTimeLabelFormats = list(day = '%d/%m/%Y')) %>%
# hc_chart(type = "line") %>%
hc_add_series(data = brvm_allindex_dt[, -c(2,3,4,6)],
"line",
hcaes(x = Date, y= Close, group= Ticker))%>%
hc_xAxis(title = list(text = ""))%>%
hc_yAxis(title = list(text = "Cours de clôture"),
opposite = FALSE)
ggplot(brvm_allindex_dt, aes(x = Date, y = Close, color = Ticker)) +
ylab("Cours de clôture") +
geom_line() +
theme_bw() +
geom_vline(xintercept = as.numeric(as.Date("2013-09-29")),
linetype = "dashed", color = "red") +
scale_y_continuous(limits = c(0, 3000), breaks = seq(0, 3000, 500))
highchart() %>%
hc_add_series(brvm_allindex_dt, type = "line", hcaes(x = Date, y = Close, group = Ticker), name = "{group}: {y}") %>%
# hc_add_series(all_data, type = "line", hcaes(x = year, y = gdp, group = country), name = "{group}: {y}") %>%
# hc_add_series(all_data, type = "line", hcaes(x = year, y = unemployment_rate, group = country), name = "{group}: {y}") %>%
hc_xAxis(title = list(text = "Date")) %>%
hc_yAxis(title = list(text = "Cours de clôture")) %>%
hc_legend(enabled = TRUE) %>%
hc_title(text = "LES SECTEURS DE LA BRVM")
highchart() %>%
hc_xAxis(type = "datetime", dateTimeLabelFormats = list(day = '%d/%m/%Y')) %>%
# hc_chart(type = "line") %>%
hc_add_series(data = brvm_allindex_dt[, -c(2,3,4,6)],
"line",
hcaes(x = Date, y= Close, group= Ticker))%>%
hc_xAxis(title = list(text = ""))%>%
hc_yAxis(title = list(text = "Cours de clôture"),
opposite = FALSE)%>%
hc_title(text = "EVOLUTION DES COURS DE CLOTURE DES SECTEURS DE LA BRVM")
plot_ly(data = brvm_allindex_dt, x = ~Date, y = ~Close, type = "bar", color = ~Ticker)
Graph_of_liq
ggplot(data = na.omit(subset(BRVM_Liq_measure, Ticker %in% .sectors$Agriculture)), aes(x = Date)) +
geom_line(aes(y = Tightness , colour = "Etroitesse"), linewidth = 1.2) +
geom_line(aes(y = Breadth, colour = "Largeur"), linewidth = 1.2) +
geom_line(aes(y = Resiliency, colour = "Résilience"), linewidth = 1.2) +
geom_line(aes(y = Depth*14000, colour = "Profondeur"), linewidth = 1.2) +
geom_line(aes(y = Immediacy*14000, colour = "Immédiateté"), linewidth = 1.2) +
facet_wrap(~ Ticker, nrow = 2, scales = "free_y") +
scale_color_manual("", values = c(
"Etroitesse" = "blue",
"Largeur" = "red",
"Résilience" = "green",
"Profondeur" = "orange",
"Immédiateté" = "yellow"
)) +
scale_y_continuous(
name="Variable du groupe 1",
sec.axis=sec_axis(~./14000, name="Variable du groupe 2")
) +
labs(y = "Axes y pour les variables", x = "Date") +
theme_bw() +
theme_tq() +
scale_fill_tq() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
Graph_of_liq <- function(data){
# Transformer la date du format "%Y-%m-%d %H:%M:%S" au format "%Y-%m-%d"
data$Date <- as.Date(data$Date)
data <- data %>%
group_by(Date, Ticker) %>%
summarise(BID = mean(BID),
ASK = mean(ASK),
`Mid quote` = mean(`Mid quote`),
Spread = mean(Spread),
Tightness = mean(Tightness),
Depth = mean(Depth),
Breadth = mean(Breadth),
Immediacy = mean(Immediacy),
Resiliency = mean(Resiliency),
`Proportional quoted spread` = mean(`Proportional quoted spread`),
`Log quoted spread` = mean(`Log quoted spread`),
`Log quoted size` = mean(`Log quoted size`),
`Log quoted slope` = mean(`Log quoted slope`),
`Midquote square return` = mean(`Midquote square return`),
`Midquote absolute return` = mean(`Midquote absolute return`)
)
ysec_min_left <- min(data$Tightness, data$Breadth, data$Resiliency
# , na.rm = TRUE
)
ysec_max_left <- max(data$Tightness, data$Breadth, data$Resiliency
# , na.rm = TRUE
)
ysec_min_right <- min(data$Depth, data$Immediacy
# , na.rm = TRUE
)
ysec_max_right <- max(data$Depth, data$Immediacy
# , na.rm = TRUE
)
the_coef = ysec_max_right / ysec_max_left
the_facet = length(unique(data$Ticker))
if (the_facet >= 2 & the_facet <= 4) {
n <- 2
} else if (the_facet > 4 & the_facet <= 12){
n <- 3
# } else if (the_facet > 7 & the_facet <= 6){
#     n <- 4
# } else if (the_facet > 8 & the_facet <= 12){
#     n <- 3
} else if (the_facet > 13 & the_facet <= 15){
n <- 5
} else {
n <- 1
}
the_plot <- ggplot(data = data, aes(x = Date)) +
geom_line(aes(y = Tightness , colour = "Etroitesse"), linewidth = 1.2) +
geom_line(aes(y = Breadth, colour = "Largeur"), linewidth = 0.5) +
geom_line(aes(y = Resiliency, colour = "Résilience"), linewidth = 1.2) +
geom_line(aes(y = Depth/the_coef, colour = "Profondeur"), linewidth = 1.2) +
geom_line(aes(y = Immediacy/the_coef, colour = "Immédiateté"), linewidth = 1.2) +
facet_wrap(~ Ticker, ncol = n, scales = "free_y") +
scale_color_manual("", values = c(
"Etroitesse" = "blue",
"Largeur" = "red",
"Résilience" = "green",
"Profondeur" = "orange",
"Immédiateté" = "yellow"
)) +
scale_y_continuous(name = "",
# limits = c(ysec_min_left, ysec_max_left),
sec.axis = sec_axis(~.*the_coef,
name = "")) +
labs(y = "Axe y pour les variables 1 et 2", ysec = "Axe y pour les variables 3 et 4") +
theme_bw() +
theme_tq() +
scale_fill_tq() +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
return(the_plot)
}
Graph_of_liq(data= na.omit(subset(BRVM_Liq_measure,
Ticker %in% .sectors$Agriculture)))
Graph_of_liq(data= na.omit(subset(BRVM_Liq_measure,
Ticker %in% .sectors$Distribution)))
Graph_of_liq(data= na.omit(subset(BRVM_Liq_measure,
Ticker %in% .sectors$Industry)))
Graph_of_liq(data= na.omit(subset(BRVM_Liq_measure,
Ticker %in% .sectors$Finance)))
Graph_of_liq(data= na.omit(subset(BRVM_Liq_measure,
Ticker %in% .sectors$Transport)))
Graph_of_liq(data= na.omit(subset(BRVM_Liq_measure,
Ticker %in% .sectors$`Public service`)))
Graph_of_liq(data= na.omit(subset(BRVM_Liq_measure,
Ticker %in% .sectors$Other)))
View(BRVM_Liq_measure_clean)
View(BRVM_Liq_measure)
data = na.omit(subset(BRVM_Liq_measure,
Ticker %in% .sectors$Agriculture))
View(data)
data <- data %>%
group_by(Date) %>%
summarise(BID = mean(BID),
ASK = mean(ASK),
`Mid quote` = mean(`Mid quote`),
Spread = mean(Spread),
Tightness = mean(Tightness),
Depth = mean(Depth),
Breadth = mean(Breadth),
Immediacy = mean(Immediacy),
Resiliency = mean(Resiliency),
`Proportional quoted spread` = mean(`Proportional quoted spread`),
`Log quoted spread` = mean(`Log quoted spread`),
`Log quoted size` = mean(`Log quoted size`),
`Log quoted slope` = mean(`Log quoted slope`),
`Midquote square return` = mean(`Midquote square return`),
`Midquote absolute return` = mean(`Midquote absolute return`)
)
length(.sectors$Agriculture)
unique(.sectors$Agriculture)%in%(.sectors$Agriculture)
unique(unique(.sectors$Agriculture)%in%(.sectors$Agriculture)) == "TRUE"
.sectors$Agriculture
.sectors$Distribution
length(.sectors$Distribution)
length(.sectors$Industry)
length(.sectors$Finance)
length(.sectors$Transport)
length(.sectors$`Public service`)
.sectors$`Public service`
"CIEC" %in% .sectors$`Public service`
.sectors$Agriculture
length(.sectors$Other)
Liq_Dim_byGrp <- function(data){
if (length(unique(data$Ticker)) == 5 & "PALC" %in% unique(data$Ticker)) {
Ticker <- "BRVM - Agriculture"
} else if (length(unique(data$Ticker)) == 7) {
Ticker <- "BRVM - Distribution"
} else if (length(unique(data$Ticker)) == 12) {
Ticker <- "BRVM - Industrie"
} else if (length(unique(data$Ticker)) == 15) {
Ticker <- "BRVM - Finance"
} else if (length(unique(data$Ticker)) == 2) {
Ticker <- "BRVM - Transport"
} else if (length(unique(data$Ticker)) == 5 & "SNTS" %in% unique(data$Ticker)) {
Ticker <- "BRVM - Service public"
} else {
Ticker <- "BRVM - Autre secteur"
}
data <- data %>%
group_by(Date) %>%
summarise(BID = mean(BID),
ASK = mean(ASK),
`Mid quote` = mean(`Mid quote`),
Spread = mean(Spread),
Tightness = mean(Tightness),
Depth = mean(Depth),
Breadth = mean(Breadth),
Immediacy = mean(Immediacy),
Resiliency = mean(Resiliency),
`Proportional quoted spread` = mean(`Proportional quoted spread`),
`Log quoted spread` = mean(`Log quoted spread`),
`Log quoted size` = mean(`Log quoted size`),
`Log quoted slope` = mean(`Log quoted slope`),
`Midquote square return` = mean(`Midquote square return`),
`Midquote absolute return` = mean(`Midquote absolute return`)
)
data$Ticker <- Ticker
}
Liq_Dim_byGrp <- function(data){
if (length(unique(data$Ticker)) == 5 & "PALC" %in% unique(data$Ticker)) {
Ticker <- "BRVM - Agriculture"
} else if (length(unique(data$Ticker)) == 7) {
Ticker <- "BRVM - Distribution"
} else if (length(unique(data$Ticker)) == 12) {
Ticker <- "BRVM - Industrie"
} else if (length(unique(data$Ticker)) == 15) {
Ticker <- "BRVM - Finance"
} else if (length(unique(data$Ticker)) == 2) {
Ticker <- "BRVM - Transport"
} else if (length(unique(data$Ticker)) == 5 & "SNTS" %in% unique(data$Ticker)) {
Ticker <- "BRVM - Service public"
} else {
Ticker <- "BRVM - Autre secteur"
}
data <- data %>%
group_by(Date) %>%
summarise(BID = mean(BID),
ASK = mean(ASK),
`Mid quote` = mean(`Mid quote`),
Spread = mean(Spread),
Tightness = mean(Tightness),
Depth = mean(Depth),
Breadth = mean(Breadth),
Immediacy = mean(Immediacy),
Resiliency = mean(Resiliency),
`Proportional quoted spread` = mean(`Proportional quoted spread`),
`Log quoted spread` = mean(`Log quoted spread`),
`Log quoted size` = mean(`Log quoted size`),
`Log quoted slope` = mean(`Log quoted slope`),
`Midquote square return` = mean(`Midquote square return`),
`Midquote absolute return` = mean(`Midquote absolute return`)
)
data$Ticker <- Ticker
return(data)
}
Liq_Dim_byGrp(data = na.omit(subset(BRVM_Liq_measure,
Ticker %in% .sectors$Agriculture)))
BRVM_Liq_measure_agri = Liq_Dim_byGrp(data = subset(BRVM_Liq_measure,
Ticker %in% .sectors$Agriculture))
dim(BRVM_Liq_measure_agri)
dim(na.omit(BRVM_Liq_measure_agri))
Liq_Dim_byGrp(data = subset(BRVM_Liq_measure,
Ticker %in% .sectors))
BRVM_Liq_measure_Dis = Liq_Dim_byGrp(data = subset(BRVM_Liq_measure,
Ticker %in% .sectors$Distribution))
BRVM_Liq_measure_Ind =Liq_Dim_byGrp(data = subset(BRVM_Liq_measure,
Ticker %in% .sectors$Industry))
BRVM_Liq_measure_Fin =Liq_Dim_byGrp(data = subset(BRVM_Liq_measure,
Ticker %in% .sectors$Finance))
BRVM_Liq_measure_Trans =Liq_Dim_byGrp(data = subset(BRVM_Liq_measure,
Ticker %in% .sectors$Transport))
BRVM_Liq_measure_pubs =Liq_Dim_byGrp(data = subset(BRVM_Liq_measure,
Ticker %in% .sectors$`Public service`))
BRVM_Liq_measure_Other =Liq_Dim_byGrp(data = subset(BRVM_Liq_measure,
Ticker %in% .sectors$Other))
All_sector_BRVM_Liq_measure = c()
All_sector_BRVM_Liq_measure = rbind(All_sector_BRVM_Liq_measure,
BRVM_Liq_measure_agri
# ,
# ,
# ,
# ,
# ,
)
View(BRVM_Liq_measure_Ind)
View(All_sector_BRVM_Liq_measure)
All_sector_BRVM_Liq_measure = c()
All_sector_BRVM_Liq_measure = rbind(All_sector_BRVM_Liq_measure,
BRVM_Liq_measure_agri,
BRVM_Liq_measure_Dis,
BRVM_Liq_measure_Ind,
BRVM_Liq_measure_Fin,
BRVM_Liq_measure_Trans,
BRVM_Liq_measure_pubs,
BRVM_Liq_measure_Other)
View(All_sector_BRVM_Liq_measure)
View(BRVM_Liq_measure_Other)
Graph_of_liq(data = All_sector_BRVM_Liq_measure)
names(.sectors)
unique(All_sector_BRVM_Liq_measure$Ticker)
.sectors$Industry
View(BRVM_Liq_measure_Ind)
BRVM_Liq_measure_Ind = Liq_Dim_byGrp(data = subset(BRVM_Liq_measure,
Ticker %in% .sectors$Industry))
View(BRVM_Liq_measure_Ind)
length(unique(subset(BRVM_Liq_measure,Ticker %in% .sectors$Industry)$Ticker))
length(unique(subset(BRVM_Liq_measure,Ticker %in% .sectors$`Public service`)$Ticker))
Liq_Dim_byGrp <- function(data){
if (length(unique(data$Ticker)) == 5 & "PALC" %in% unique(data$Ticker)) {
Ticker <- "BRVM - Agriculture"
} else if (length(unique(data$Ticker)) == 7) {
Ticker <- "BRVM - Distribution"
} else if (length(unique(data$Ticker)) == 11) {
Ticker <- "BRVM - Industrie"
} else if (length(unique(data$Ticker)) == 15) {
Ticker <- "BRVM - Finance"
} else if (length(unique(data$Ticker)) == 2) {
Ticker <- "BRVM - Transport"
} else if (length(unique(data$Ticker)) == 4 & "SNTS" %in% unique(data$Ticker)) {
Ticker <- "BRVM - Service public"
} else {
Ticker <- "BRVM - Autre secteur"
}
data <- data %>%
group_by(Date) %>%
summarise(BID = mean(BID),
ASK = mean(ASK),
`Mid quote` = mean(`Mid quote`),
Spread = mean(Spread),
Tightness = mean(Tightness),
Depth = mean(Depth),
Breadth = mean(Breadth),
Immediacy = mean(Immediacy),
Resiliency = mean(Resiliency),
`Proportional quoted spread` = mean(`Proportional quoted spread`),
`Log quoted spread` = mean(`Log quoted spread`),
`Log quoted size` = mean(`Log quoted size`),
`Log quoted slope` = mean(`Log quoted slope`),
`Midquote square return` = mean(`Midquote square return`),
`Midquote absolute return` = mean(`Midquote absolute return`)
)
data$Ticker <- Ticker
return(data)
}
BRVM_Liq_measure_Dis = Liq_Dim_byGrp(data = subset(BRVM_Liq_measure,
Ticker %in% .sectors$Distribution))
View(BRVM_Liq_measure_Ind)
BRVM_Liq_measure_Ind = Liq_Dim_byGrp(data = subset(BRVM_Liq_measure,
Ticker %in% .sectors$Industry))
View(BRVM_Liq_measure_Ind)
BRVM_Liq_measure_pubs = Liq_Dim_byGrp(data = subset(BRVM_Liq_measure,
Ticker %in% .sectors$`Public service`))
View(BRVM_Liq_measure_pubs)
All_sector_BRVM_Liq_measure = c()
All_sector_BRVM_Liq_measure = rbind(All_sector_BRVM_Liq_measure,
BRVM_Liq_measure_agri,
BRVM_Liq_measure_Dis,
BRVM_Liq_measure_Ind,
BRVM_Liq_measure_Fin,
BRVM_Liq_measure_Trans,
BRVM_Liq_measure_pubs,
BRVM_Liq_measure_Other)
Graph_of_liq(data = All_sector_BRVM_Liq_measure)
getwd
getwd()
View(BRVM_Liq_measure_pubs)
View(All_sector_BRVM_Liq_measure)
# First of all, you must set your working directory
setwd("~/")
getwd()
write_xlsx(All_sector_BRVM_Liq_measure, 'BRVM mesure de liquidité par secteur')
write_xlsx(All_sector_BRVM_Liq_measure, 'BRVM mesure de liquidité par secteur.xlsx')
library(devtools)
library(goftest)
library(usethis)
library(devtools)
usethis::use_release_issue()
setwd("~/GitHub/BRVM")
usethis::use_release_issue()
usethis::use_cran_comments()
devtools::build_readme()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = T)
save.image()
